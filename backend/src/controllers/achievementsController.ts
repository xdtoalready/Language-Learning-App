// backend/src/controllers/achievementsController.ts
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

interface AuthRequest extends Request {
  userId?: string;
}

/**
 * –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
 */
const SYSTEM_ACHIEVEMENTS = [
  {
    key: 'first_word',
    name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
    description: '–ò–∑—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ',
    icon: 'AcademicCapIcon',
    color: 'green',
    category: 'LEARNING',
    requirement: { type: 'words_learned', value: 1 },
    points: 10
  },
  {
    key: 'week_streak',
    name: '–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥',
    description: '–ò–∑—É—á–∞—Ç—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'FireIcon',
    color: 'orange',
    category: 'STREAK',
    requirement: { type: 'current_streak', value: 7 },
    points: 50
  },
  {
    key: 'words_50',
    name: '–ó–Ω–∞–Ω–∏–µ',
    description: '–ò–∑—É—á–∏—Ç—å 50 —Å–ª–æ–≤',
    icon: 'BookOpenIcon',
    color: 'blue',
    category: 'LEARNING',
    requirement: { type: 'words_learned', value: 50 },
    points: 100
  },
  {
    key: 'words_100',
    name: '–ó–Ω–∞—Ç–æ–∫ —Å–ª–æ–≤',
    description: '–ò–∑—É—á–∏—Ç—å 100 —Å–ª–æ–≤',
    icon: 'TrophyIcon',
    color: 'purple',
    category: 'LEARNING',
    requirement: { type: 'words_learned', value: 100 },
    points: 200
  },
  {
    key: 'words_500',
    name: '–≠—Ä—É–¥–∏—Ç',
    description: '–ò–∑—É—á–∏—Ç—å 500 —Å–ª–æ–≤',
    icon: 'StarIcon',
    color: 'yellow',
    category: 'LEARNING',
    requirement: { type: 'words_learned', value: 500 },
    points: 500
  },
  {
    key: 'month_streak',
    name: '–ú–µ—Å—è—Ü —Å–∏–ª—ã',
    description: '–ò–∑—É—á–∞—Ç—å 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'FireIcon',
    color: 'red',
    category: 'STREAK',
    requirement: { type: 'current_streak', value: 30 },
    points: 300
  },
  {
    key: 'perfect_week',
    name: '–ò–¥–µ–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è',
    description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'CheckCircleIcon',
    color: 'green',
    category: 'PROGRESS',
    requirement: { type: 'perfect_week', value: 1 },
    points: 150
  },
  {
    key: 'social_butterfly',
    name: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
    description: '–î–æ–±–∞–≤–∏—Ç—å 5 –¥—Ä—É–∑–µ–π',
    icon: 'HeartIcon',
    color: 'pink',
    category: 'SOCIAL',
    requirement: { type: 'friends_count', value: 5 },
    points: 75
  }
];

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞)
 */
export const initializeAchievements = async (): Promise<void> => {
  try {
    console.log('üèÜ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');
    
    for (const achData of SYSTEM_ACHIEVEMENTS) {
      await prisma.achievement.upsert({
        where: { key: achData.key },
        update: {
          name: achData.name,
          description: achData.description,
          icon: achData.icon,
          color: achData.color,
          requirement: achData.requirement,
          points: achData.points
        },
        create: {
          key: achData.key,
          name: achData.name,
          description: achData.description,
          icon: achData.icon,
          color: achData.color,
          category: achData.category as any,
          requirement: achData.requirement,
          points: achData.points
        }
      });
    }
    
    console.log('‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export const checkAndAwardAchievements = async (userId: string): Promise<string[]> => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: {
        currentStreak: true,
        totalWordsLearned: true,
        _count: {
          select: {
            friends: true,
            reviews: true
          }
        }
      }
    });

    if (!user) return [];

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = await prisma.achievement.findMany();
    
    // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userAchievements = await prisma.userAchievement.findMany({
      where: { userId },
      select: { achievementId: true }
    });
    
    const achievedIds = new Set(userAchievements.map(ua => ua.achievementId));
    const newAchievements: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    for (const achievement of achievements) {
      if (achievedIds.has(achievement.id)) continue; // —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ

      const req = achievement.requirement as any;
      let shouldAward = false;

      switch (req.type) {
        case 'words_learned':
          shouldAward = user.totalWordsLearned >= req.value;
          break;
        case 'current_streak':
          shouldAward = user.currentStreak >= req.value;
          break;
        case 'friends_count':
          shouldAward = user._count.friends >= req.value;
          break;
        case 'perfect_week':
          // –≠—Ç–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º
          shouldAward = false;
          break;
      }

      if (shouldAward) {
        await prisma.userAchievement.create({
          data: {
            userId,
            achievementId: achievement.id
          }
        });
        newAchievements.push(achievement.key);
      }
    }

    return newAchievements;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    return [];
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getUserAchievements = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.userId!;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, –ø–æ–ª—É—á–µ–Ω—ã –ª–∏ –æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const achievements = await prisma.achievement.findMany({
      include: {
        userAchievements: {
          where: { userId },
          select: {
            unlockedAt: true,
            progress: true
          }
        }
      },
      orderBy: [
        { category: 'asc' },
        { points: 'asc' }
      ]
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const newAchievements = await checkAndAwardAchievements(userId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const achievementsWithStatus = achievements.map(achievement => ({
      id: achievement.id,
      key: achievement.key,
      name: achievement.name,
      description: achievement.description,
      icon: achievement.icon,
      color: achievement.color,
      category: achievement.category,
      points: achievement.points,
      isUnlocked: achievement.userAchievements.length > 0,
      unlockedAt: achievement.userAchievements[0]?.unlockedAt || null,
      progress: achievement.userAchievements[0]?.progress || null,
      isSecret: achievement.isSecret && achievement.userAchievements.length === 0
    }));

    res.json({
      achievements: achievementsWithStatus,
      newAchievements,
      totalPoints: achievementsWithStatus
        .filter(a => a.isUnlocked)
        .reduce((sum, a) => sum + a.points, 0)
    });

  } catch (error) {
    console.error('Get user achievements error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–∞)
 */
export const getPublicUserAchievements = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { userId: targetUserId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const targetUser = await prisma.user.findUnique({
      where: { id: targetUserId },
      select: { id: true, username: true }
    });

    if (!targetUser) {
      res.status(404).json({ error: 'User not found' });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userAchievements = await prisma.userAchievement.findMany({
      where: { userId: targetUserId },
      include: {
        achievement: {
          select: {
            id: true,
            key: true,
            name: true,
            description: true,
            icon: true,
            color: true,
            category: true,
            points: true,
            isSecret: true
          }
        }
      },
      orderBy: {
        unlockedAt: 'desc'
      }
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const publicAchievements = userAchievements
      .filter(ua => !ua.achievement.isSecret)
      .map(ua => ({
        id: ua.achievement.id,
        key: ua.achievement.key,
        name: ua.achievement.name,
        description: ua.achievement.description,
        icon: ua.achievement.icon,
        color: ua.achievement.color,
        category: ua.achievement.category,
        points: ua.achievement.points,
        unlockedAt: ua.unlockedAt
      }));

    const totalPoints = publicAchievements.reduce((sum, a) => sum + a.points, 0);

    res.json({
      user: targetUser,
      achievements: publicAchievements,
      totalPoints,
      totalCount: publicAchievements.length
    });

  } catch (error) {
    console.error('Get public user achievements error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
 */
export const getAchievementProgress = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.userId!;

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: {
        currentStreak: true,
        longestStreak: true,
        totalWordsLearned: true,
        _count: {
          select: {
            friends: true,
            reviews: true
          }
        }
      }
    });

    if (!user) {
      res.status(404).json({ error: 'User not found' });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª
    const unlockedAchievementIds = await prisma.userAchievement.findMany({
      where: { userId },
      select: { achievementId: true }
    });

    const unlockedIds = new Set(unlockedAchievementIds.map(ua => ua.achievementId));

    const remainingAchievements = await prisma.achievement.findMany({
      where: {
        id: { notIn: Array.from(unlockedIds) },
        isSecret: false
      }
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ –∫–∞–∂–¥–æ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
    const progress = remainingAchievements.map(achievement => {
      const req = achievement.requirement as any;
      let current = 0;
      let max = req.value;

      switch (req.type) {
        case 'words_learned':
          current = user.totalWordsLearned;
          break;
        case 'current_streak':
          current = user.currentStreak;
          break;
        case 'friends_count':
          current = user._count.friends;
          break;
      }

      return {
        achievementId: achievement.id,
        key: achievement.key,
        name: achievement.name,
        description: achievement.description,
        icon: achievement.icon,
        color: achievement.color,
        current,
        required: max,
        percentage: Math.min(100, Math.round((current / max) * 100))
      };
    });

    res.json({ progress });

  } catch (error) {
    console.error('Get achievement progress error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};
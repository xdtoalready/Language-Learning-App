// backend/src/controllers/friendshipController.ts
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { createNewWordParams } from '../utils/spacedRepetition';

const prisma = new PrismaClient();

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Å–µ—Ö –µ–≥–æ –¥—Ä—É–∑–µ–π
 */
export const updateUserActivity = async (userId: string): Promise<void> => {
  try {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥—Ä—É–∂–µ—Å–∫–∏–µ —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const friendships = await prisma.friendship.findMany({
      where: {
        OR: [
          { userId, status: 'ACCEPTED' },
          { friendId: userId, status: 'ACCEPTED' }
        ]
      },
      include: {
        cloudStreak: true
      }
    });

    const today = new Date();
    today.setHours(0, 0, 0, 0); // –ù–∞—á–∞–ª–æ –¥–Ω—è

    for (const friendship of friendships) {
      const isUser1 = friendship.userId === userId;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º CloudStreak
      let cloudStreak = friendship.cloudStreak;
      if (!cloudStreak) {
        cloudStreak = await prisma.cloudStreak.create({
          data: {
            friendshipId: friendship.id,
            currentStreak: 0,
            longestStreak: 0
          }
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updateData: any = {};
      if (isUser1) {
        updateData.user1LastActive = new Date();
      } else {
        updateData.user2LastActive = new Date();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω—ã –ª–∏ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–≥–æ–¥–Ω—è
      const otherUserActiveToday = isUser1 
        ? cloudStreak.user2LastActive && cloudStreak.user2LastActive >= today
        : cloudStreak.user1LastActive && cloudStreak.user1LastActive >= today;

      const currentUserActiveToday = true; // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω (–º—ã –µ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ–º)

      // –ï—Å–ª–∏ –æ–±–∞ –∞–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫
      if (otherUserActiveToday && currentUserActiveToday) {
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—á–µ—Ä–∞ –∞–∫—Ç–∏–≤–µ–Ω —Å—Ç—Ä–∏–∫
        const wasActiveYesterday = cloudStreak.lastActiveDate && 
          cloudStreak.lastActiveDate >= yesterday && 
          cloudStreak.lastActiveDate < today;

        if (wasActiveYesterday) {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç—Ä–∏–∫
          updateData.currentStreak = cloudStreak.currentStreak + 1;
        } else {
          // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫
          updateData.currentStreak = 1;
        }

        updateData.lastActiveDate = today;
        updateData.longestStreak = Math.max(cloudStreak.longestStreak, updateData.currentStreak);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º CloudStreak
      await prisma.cloudStreak.update({
        where: { id: cloudStreak.id },
        data: updateData
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–±–ª–∞—á–∫–∏ –¥—Ä—É–∑–µ–π
 */
export const getFriendsWithClouds = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.userId!;

    const friendships = await prisma.friendship.findMany({
      where: {
        OR: [
          { userId, status: 'ACCEPTED' },
          { friendId: userId, status: 'ACCEPTED' }
        ]
      },
      include: {
        user: {
          select: {
            id: true,
            username: true,
            avatar: true,
            learningLanguage: true,
            currentStreak: true,
            totalWordsLearned: true,
            lastActiveDate: true
          }
        },
        friend: {
          select: {
            id: true,
            username: true,
            avatar: true,
            learningLanguage: true,
            currentStreak: true,
            totalWordsLearned: true,
            lastActiveDate: true
          }
        },
        cloudStreak: true
      }
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —Å –æ–±–ª–∞—á–∫–∞–º–∏
    const friendsWithClouds = friendships.map(friendship => {
      const friend = friendship.userId === userId ? friendship.friend : friendship.user;
      const cloudStreak = friendship.cloudStreak?.currentStreak || 0;
      
      return {
        ...friend,
        friendshipId: friendship.id,
        friendshipDate: friendship.createdAt,
        cloudStreak,
        longestCloudStreak: friendship.cloudStreak?.longestStreak || 0,
        lastCloudActivity: friendship.cloudStreak?.lastActiveDate
      };
    });

    res.json({ friends: friendsWithClouds });

  } catch (error) {
    console.error('Get friends with clouds error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

interface AuthRequest extends Request {
  userId?: string;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–∞
 */
export const getFriendProfile = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.userId!;
    const { friendId } = req.params;

    if (!friendId) {
      res.status(400).json({ error: 'Friend ID is required' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const friendUser = await prisma.user.findUnique({
      where: { id: friendId },
      select: {
        id: true,
        username: true,
        avatar: true,
        learningLanguage: true,
        currentStreak: true,
        longestStreak: true,
        totalWordsLearned: true,
        joinDate: true,
        lastActiveDate: true
      }
    });

    if (!friendUser) {
      res.status(404).json({ error: 'User not found' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–∂–±—É
    const friendship = await prisma.friendship.findFirst({
      where: {
        OR: [
          { userId, friendId, status: 'ACCEPTED' },
          { userId: friendId, friendId: userId, status: 'ACCEPTED' }
        ]
      },
      include: {
        cloudStreak: true
      }
    });

    const isFriend = !!friendship;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const friendProfile = {
    ...friendUser,
    isFriend,
    friendshipId: friendship?.id || null,
    friendshipDate: friendship?.createdAt || null,
    cloudStreak: friendship?.cloudStreak?.currentStreak || 0,
    longestCloudStreak: friendship?.cloudStreak?.longestStreak || 0,
    lastCloudActivity: friendship?.cloudStreak?.lastActiveDate || null
    };

    res.json({ friend: friendProfile });

  } catch (error) {
    console.error('Get friend profile error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
 */
export const getFriendWords = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.userId!;
    const { friendId } = req.params;
    const { 
      search, 
      tags, 
      page = '1',
      limit = '20'
    } = req.query;

    if (!friendId) {
      res.status(400).json({ error: 'Friend ID is required' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥—Ä—É–∑—å—è
    const friendship = await prisma.friendship.findFirst({
      where: {
        OR: [
          { userId, friendId, status: 'ACCEPTED' },
          { userId: friendId, friendId: userId, status: 'ACCEPTED' }
        ]
      }
    });

    if (!friendship) {
      res.status(403).json({ error: 'You are not friends with this user' });
      return;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–ª–æ–≤
    const where: any = { 
      userId: friendId,
      masteryLevel: { lt: 5 } // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ (–Ω–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ)
    };

    // –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—É
    if (search) {
      where.OR = [
        { word: { contains: search as string, mode: 'insensitive' } },
        { translation: { contains: search as string, mode: 'insensitive' } }
      ];
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º
    if (tags) {
      const tagArray = (tags as string).split(',').filter(tag => tag.trim());
      if (tagArray.length > 0) {
        where.tags = {
          hasSome: tagArray
        };
      }
    }

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const pageNum = parseInt(page as string);
    const limitNum = parseInt(limit as string);
    const skip = (pageNum - 1) * limitNum;

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const [words, totalCount] = await Promise.all([
      prisma.word.findMany({
        where,
        select: {
          id: true,
          word: true,
          translation: true,
          transcription: true,
          tags: true,
          masteryLevel: true,
          createdAt: true
        },
        orderBy: { createdAt: 'desc' },
        skip,
        take: limitNum
      }),
      prisma.word.count({ where })
    ]);

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const allWords = await prisma.word.findMany({
      where: { 
        userId: friendId,
        masteryLevel: { lt: 5 }
      },
      select: { tags: true }
    });

    const allTags = [...new Set(allWords.flatMap(w => w.tags))].sort();

    const totalPages = Math.ceil(totalCount / limitNum);

    res.json({
      words,
      availableTags: allTags,
      pagination: {
        currentPage: pageNum,
        totalPages,
        totalCount,
        limit: limitNum,
        hasNext: pageNum < totalPages,
        hasPrev: pageNum > 1
      }
    });

  } catch (error) {
    console.error('Get friend words error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ –¥—Ä—É–≥–∞ –∫ —Å–µ–±–µ –≤ —Å–ª–æ–≤–∞—Ä—å
 */
export const copyFriendWord = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.userId!;
    const { friendId, wordId } = req.params;

    if (!friendId || !wordId) {
      res.status(400).json({ error: 'Friend ID and Word ID are required' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥—Ä—É–∑—å—è
    const friendship = await prisma.friendship.findFirst({
      where: {
        OR: [
          { userId, friendId, status: 'ACCEPTED' },
          { userId: friendId, friendId: userId, status: 'ACCEPTED' }
        ]
      }
    });

    if (!friendship) {
      res.status(403).json({ error: 'You are not friends with this user' });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –¥—Ä—É–≥–∞
    const friendWord = await prisma.word.findFirst({
      where: {
        id: wordId,
        userId: friendId
      }
    });

    if (!friendWord) {
      res.status(404).json({ error: 'Word not found' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞
    const existingWord = await prisma.word.findFirst({
      where: {
        userId,
        word: { equals: friendWord.word, mode: 'insensitive' }
      }
    });

    if (existingWord) {
      res.status(409).json({ 
        error: 'Word already exists in your vocabulary',
        existingWord: {
          id: existingWord.id,
          word: existingWord.word,
          translation: existingWord.translation
        }
      });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å)
    const newWordParams = createNewWordParams();

    // –ö–æ–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–æ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const newWord = await prisma.word.create({
      data: {
        word: friendWord.word,
        translation: friendWord.translation,
        transcription: friendWord.transcription,
        example: friendWord.example,
        tags: [...friendWord.tags, '–æ—Ç –¥—Ä—É–≥–∞'], // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ "–æ—Ç –¥—Ä—É–≥–∞"
        userId,
        ...newWordParams
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.user.update({
      where: { id: userId },
      data: {
        totalWordsLearned: {
          increment: 1
        }
      }
    });

    res.status(201).json({
      message: 'Word copied successfully',
      word: newWord,
      copiedFrom: {
        username: friendId, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –ø–æ–ª—É—á–∏—Ç—å username
        originalWord: friendWord.word
      }
    });

  } catch (error) {
    console.error('Copy friend word error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

/**
 * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è
 */
export const searchUsers = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.userId!;
    const { query } = req.query;

    if (!query || typeof query !== 'string' || query.trim().length < 2) {
      res.status(400).json({ 
        error: 'Search query must be at least 2 characters long' 
      });
      return;
    }

    const searchTerm = query.trim().toLowerCase();

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username –∏–ª–∏ email (–∏—Å–∫–ª—é—á–∞—è —Å–µ–±—è)
    const users = await prisma.user.findMany({
      where: {
        AND: [
          { id: { not: userId } },
          {
            OR: [
              { username: { contains: searchTerm, mode: 'insensitive' } },
              { email: { contains: searchTerm, mode: 'insensitive' } }
            ]
          }
        ]
      },
      select: {
        id: true,
        username: true,
        email: true,
        avatar: true,
        learningLanguage: true,
        currentStreak: true,
        totalWordsLearned: true,
        joinDate: true
      },
      take: 10 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥—Ä—É–∂–µ—Å–∫–∏—Ö —Å–≤—è–∑—è—Ö
    const existingFriendships = await prisma.friendship.findMany({
      where: {
        OR: [
          { userId, friendId: { in: users.map(u => u.id) } },
          { friendId: userId, userId: { in: users.map(u => u.id) } }
        ]
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–∂–±—ã –∫ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const usersWithStatus = users.map(user => {
      const friendship = existingFriendships.find(f => 
        (f.userId === userId && f.friendId === user.id) ||
        (f.friendId === userId && f.userId === user.id)
      );

      let friendshipStatus = 'none';
      if (friendship) {
        if (friendship.status === 'ACCEPTED') {
          friendshipStatus = 'friends';
        } else if (friendship.status === 'PENDING') {
          friendshipStatus = friendship.userId === userId ? 'sent' : 'received';
        } else if (friendship.status === 'BLOCKED') {
          friendshipStatus = 'blocked';
        }
      }

      return {
        ...user,
        friendshipStatus
      };
    });

    res.json({ users: usersWithStatus });

  } catch (error) {
    console.error('Search users error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è
 */
export const sendFriendRequest = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.userId!;
    const { friendId } = req.body;

    if (!friendId) {
      res.status(400).json({ error: 'Friend ID is required' });
      return;
    }

    if (userId === friendId) {
      res.status(400).json({ error: 'Cannot add yourself as friend' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const targetUser = await prisma.user.findUnique({
      where: { id: friendId }
    });

    if (!targetUser) {
      res.status(404).json({ error: 'User not found' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –¥—Ä—É–∂–µ—Å–∫–æ–π —Å–≤—è–∑–∏
    const existingFriendship = await prisma.friendship.findFirst({
      where: {
        OR: [
          { userId, friendId },
          { userId: friendId, friendId: userId }
        ]
      }
    });

    if (existingFriendship) {
      res.status(400).json({ 
        error: 'Friendship already exists',
        status: existingFriendship.status 
      });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è
    const friendship = await prisma.friendship.create({
      data: {
        userId,
        friendId,
        status: 'PENDING'
      },
      include: {
        friend: {
          select: {
            id: true,
            username: true,
            avatar: true,
            learningLanguage: true
          }
        }
      }
    });

    res.json({
      message: 'Friend request sent successfully',
      friendship
    });

  } catch (error) {
    console.error('Send friend request error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

/**
 * –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è (–ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
 */
export const respondToFriendRequest = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.userId!;
    const { friendshipId } = req.params;
    const { action } = req.body; // 'accept' –∏–ª–∏ 'reject'

    if (!['accept', 'reject'].includes(action)) {
      res.status(400).json({ error: 'Action must be accept or reject' });
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è
    const friendship = await prisma.friendship.findFirst({
      where: {
        id: friendshipId,
        friendId: userId, // –¢–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞—è–≤–∫—É
        status: 'PENDING'
      }
    });

    if (!friendship) {
      res.status(404).json({ error: 'Friend request not found' });
      return;
    }

    if (action === 'accept') {
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É
      const updatedFriendship = await prisma.friendship.update({
        where: { id: friendshipId },
        data: { status: 'ACCEPTED' },
        include: {
          user: {
            select: {
              id: true,
              username: true,
              avatar: true,
              learningLanguage: true
            }
          }
        }
      });

      res.json({
        message: 'Friend request accepted',
        friendship: updatedFriendship
      });
    } else {
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É (—É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å)
      await prisma.friendship.delete({
        where: { id: friendshipId }
      });

      res.json({ message: 'Friend request rejected' });
    }

  } catch (error) {
    console.error('Respond to friend request error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
 */
export const getFriends = async (req: AuthRequest, res: Response): Promise<void> => {
  // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å –æ–±–ª–∞—á–∫–∞–º–∏
  await getFriendsWithClouds(req, res);
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
 */
export const getPendingRequests = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.userId!;

    const pendingRequests = await prisma.friendship.findMany({
      where: {
        friendId: userId,
        status: 'PENDING'
      },
      include: {
        user: {
          select: {
            id: true,
            username: true,
            avatar: true,
            learningLanguage: true,
            currentStreak: true,
            totalWordsLearned: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    res.json({ requests: pendingRequests });

  } catch (error) {
    console.error('Get pending requests error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

/**
 * –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞
 */
export const removeFriend = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.userId!;
    const { friendshipId } = req.params;

    // –ù–∞—Ö–æ–¥–∏–º –¥—Ä—É–∂–µ—Å–∫—É—é —Å–≤—è–∑—å
    const friendship = await prisma.friendship.findFirst({
      where: {
        id: friendshipId,
        OR: [
          { userId },
          { friendId: userId }
        ],
        status: 'ACCEPTED'
      }
    });

    if (!friendship) {
      res.status(404).json({ error: 'Friendship not found' });
      return;
    }

    // –£–¥–∞–ª—è–µ–º –¥—Ä—É–∂–µ—Å–∫—É—é —Å–≤—è–∑—å
    await prisma.friendship.delete({
      where: { id: friendshipId }
    });

    res.json({ message: 'Friend removed successfully' });

  } catch (error) {
    console.error('Remove friend error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};
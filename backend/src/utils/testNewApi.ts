// backend/src/utils/testNewApi.ts
// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤

import fetch from 'node-fetch';

const API_BASE = 'http://localhost:5000/api';

interface TestResult {
  endpoint: string;
  method: string;
  status: 'PASS' | 'FAIL' | 'SKIP';
  message: string;
  responseTime?: number;
}

class ApiTester {
  private token: string | null = null;
  private results: TestResult[] = [];

  private async request(
    endpoint: string, 
    method: string = 'GET', 
    body?: any,
    requireAuth: boolean = true
  ): Promise<{ status: number; data: any; time: number }> {
    const startTime = Date.now();
    
    const headers: any = {
      'Content-Type': 'application/json'
    };

    if (requireAuth && this.token) {
      headers.Authorization = `Bearer ${this.token}`;
    }

    const config: any = {
      method,
      headers
    };

    if (body) {
      config.body = JSON.stringify(body);
    }

    try {
      const response = await fetch(`${API_BASE}${endpoint}`, config);
      const data = await response.json();
      const time = Date.now() - startTime;

      return { status: response.status, data, time };
    } catch (error) {
      const time = Date.now() - startTime;
      return { status: 0, data: { error: error instanceof Error ? error.message : String(error) }, time };
    }
  }

  private addResult(endpoint: string, method: string, status: 'PASS' | 'FAIL' | 'SKIP', message: string, time?: number) {
    this.results.push({ endpoint, method, status, message, responseTime: time });
  }

  async testAuth() {
    console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

    // –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞
    const loginResult = await this.request('/auth/login', 'POST', {
      emailOrUsername: 'test@example.com',
      password: '123456'
    }, false);

    if (loginResult.status === 200 && loginResult.data.token) {
      this.token = loginResult.data.token;
      this.addResult('/auth/login', 'POST', 'PASS', '–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', loginResult.time);
      console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    } else {
      this.addResult('/auth/login', 'POST', 'FAIL', `–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${loginResult.data.error}`, loginResult.time);
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      return false;
    }

    // –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    const profileResult = await this.request('/auth/profile');
    if (profileResult.status === 200) {
      this.addResult('/auth/profile', 'GET', 'PASS', '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω', profileResult.time);
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω');
    } else {
      this.addResult('/auth/profile', 'GET', 'FAIL', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è', profileResult.time);
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
    }

    return true;
  }

  async testReviewSessions() {
    console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π —Ä–µ–≤—å—é...');

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    const dailySessionResult = await this.request('/reviews/sessions', 'POST', {
      mode: 'RECOGNITION',
      sessionType: 'daily'
    });

    if (dailySessionResult.status === 200) {
      this.addResult('/reviews/sessions', 'POST', 'PASS', '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞', dailySessionResult.time);
      console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞');

      const sessionId = dailySessionResult.data.session?.sessionId;
      if (sessionId) {
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
        const currentWordResult = await this.request(`/reviews/sessions/${sessionId}/current`);
        if (currentWordResult.status === 200) {
          this.addResult(`/reviews/sessions/:id/current`, 'GET', 'PASS', '–¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –ø–æ–ª—É—á–µ–Ω–æ', currentWordResult.time);
          console.log('‚úÖ –¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –ø–æ–ª—É—á–µ–Ω–æ');
        } else {
          this.addResult(`/reviews/sessions/:id/current`, 'GET', 'FAIL', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞', currentWordResult.time);
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞');
        }

        // –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        const endSessionResult = await this.request(`/reviews/sessions/${sessionId}`, 'DELETE');
        if (endSessionResult.status === 200) {
          this.addResult(`/reviews/sessions/:id`, 'DELETE', 'PASS', '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', endSessionResult.time);
          console.log('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } else {
          this.addResult(`/reviews/sessions/:id`, 'DELETE', 'FAIL', '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏', endSessionResult.time);
          console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏');
        }
      }
    } else {
      this.addResult('/reviews/sessions', 'POST', 'FAIL', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${dailySessionResult.data.error}`, dailySessionResult.time);
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
    }

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏
    const trainingSessionResult = await this.request('/reviews/sessions', 'POST', {
      mode: 'TRANSLATION_INPUT',
      sessionType: 'training',
      filterBy: {
        onlyActive: true
      }
    });

    if (trainingSessionResult.status === 200) {
      this.addResult('/reviews/sessions (training)', 'POST', 'PASS', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞', trainingSessionResult.time);
      console.log('‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      this.addResult('/reviews/sessions (training)', 'POST', 'FAIL', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏: ${trainingSessionResult.data.error}`, trainingSessionResult.time);
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏');
    }
  }

  async testHints() {
    console.log('\nüí° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫...');

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –ª—é–±–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const wordsResult = await this.request('/words?limit=1');
    
    if (wordsResult.status === 200 && wordsResult.data.words.length > 0) {
      const wordId = wordsResult.data.words[0].id;

      // –¢–µ—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª–∏–Ω—ã
      const lengthHintResult = await this.request('/reviews/hint', 'POST', {
        wordId,
        hintType: 'length',
        currentHintsUsed: 0,
        direction: 'LEARNING_TO_NATIVE'
      });

      if (lengthHintResult.status === 200) {
        this.addResult('/reviews/hint (length)', 'POST', 'PASS', '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª–∏–Ω—ã –ø–æ–ª—É—á–µ–Ω–∞', lengthHintResult.time);
        console.log('‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª–∏–Ω—ã –ø–æ–ª—É—á–µ–Ω–∞');
      } else {
        this.addResult('/reviews/hint (length)', 'POST', 'FAIL', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª–∏–Ω—ã', lengthHintResult.time);
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª–∏–Ω—ã');
      }

      // –¢–µ—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
      const letterHintResult = await this.request('/reviews/hint', 'POST', {
        wordId,
        hintType: 'first_letter',
        currentHintsUsed: 1,
        direction: 'LEARNING_TO_NATIVE'
      });

      if (letterHintResult.status === 200) {
        this.addResult('/reviews/hint (first_letter)', 'POST', 'PASS', '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã –ø–æ–ª—É—á–µ–Ω–∞', letterHintResult.time);
        console.log('‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã –ø–æ–ª—É—á–µ–Ω–∞');
      } else {
        this.addResult('/reviews/hint (first_letter)', 'POST', 'FAIL', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã', letterHintResult.time);
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã');
      }
    } else {
      this.addResult('/reviews/hint', 'POST', 'SKIP', '–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫');
      console.log('‚è≠Ô∏è –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫');
    }
  }

  async testTrainingGround() {
    console.log('\nüèãÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞...');

    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤
    const trainingWordsResult = await this.request('/reviews/training-words?limit=5');

    if (trainingWordsResult.status === 200) {
      this.addResult('/reviews/training-words', 'GET', 'PASS', `–ü–æ–ª—É—á–µ–Ω–æ ${trainingWordsResult.data.count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤`, trainingWordsResult.time);
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${trainingWordsResult.data.count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏`);
    } else {
      this.addResult('/reviews/training-words', 'GET', 'FAIL', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤', trainingWordsResult.time);
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤');
    }

    // –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–≥–∞–º
    const filteredWordsResult = await this.request('/reviews/training-words?tags=test,example&masteryLevel=0,1,2');

    if (filteredWordsResult.status === 200) {
      this.addResult('/reviews/training-words (filtered)', 'GET', 'PASS', '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç', filteredWordsResult.time);
      console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      this.addResult('/reviews/training-words (filtered)', 'GET', 'FAIL', '–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏', filteredWordsResult.time);
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤');
    }
  }

  async testLegacyCompatibility() {
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...');

    // –¢–µ—Å—Ç —Å—Ç–∞—Ä–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ startReviewSession
    const legacyStartResult = await this.request('/reviews/start');

    if (legacyStartResult.status === 200) {
      this.addResult('/reviews/start (legacy)', 'GET', 'PASS', '–°—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç', legacyStartResult.time);
      console.log('‚úÖ –°—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /reviews/start —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      this.addResult('/reviews/start (legacy)', 'GET', 'FAIL', '–°—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', legacyStartResult.time);
      console.log('‚ùå –°—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /reviews/start –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
  }

  printResults() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API');
    console.log('='.repeat(60));

    const passed = this.results.filter(r => r.status === 'PASS').length;
    const failed = this.results.filter(r => r.status === 'FAIL').length;
    const skipped = this.results.filter(r => r.status === 'SKIP').length;
    const total = this.results.length;

    console.log(`\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`‚úÖ –ü—Ä–æ—à–ª–æ: ${passed}`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ—à–ª–æ: ${failed}`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
    console.log(`üìä –í—Å–µ–≥–æ: ${total}`);
    console.log(`üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / (total - skipped)) * 100)}%`);

    console.log(`\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    this.results.forEach(result => {
      const statusIcon = result.status === 'PASS' ? '‚úÖ' : result.status === 'FAIL' ? '‚ùå' : '‚è≠Ô∏è';
      const timeStr = result.responseTime ? ` (${result.responseTime}ms)` : '';
      console.log(`${statusIcon} ${result.method} ${result.endpoint} - ${result.message}${timeStr}`);
    });

    if (failed > 0) {
      console.log(`\n‚ö†Ô∏è  –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.`);
    } else {
      console.log(`\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.`);
    }
  }

  async runAllTests() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–û–í–´–• API –≠–ù–î–ü–û–ò–ù–¢–û–í');
    console.log('=' .repeat(60));

    const authSuccess = await this.testAuth();
    
    if (authSuccess) {
      await this.testReviewSessions();
      await this.testHints();
      await this.testTrainingGround();
      await this.testLegacyCompatibility();
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    }

    this.printResults();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new ApiTester();
  await tester.runAllTests();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

export { ApiTester };
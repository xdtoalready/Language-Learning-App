// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String    @unique
  password          String
  avatar            String?
  joinDate          DateTime  @default(now())
  currentStreak     Int       @default(0)
  longestStreak     Int       @default(0)
  totalWordsLearned Int       @default(0)
  dailyGoal         Int       @default(10)
  learningLanguage  String    @default("English") // "English", "Korean", "Chinese", etc.
  lastActiveDate    DateTime?
  
  // Связи
  words             Word[]
  reviews           Review[]
  friends           Friendship[] @relation("UserFriends")
  friendOf          Friendship[] @relation("FriendOfUser")
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@map("users")
}

model Word {
  id              String   @id @default(cuid())
  word            String
  translation     String
  transcription   String?
  example         String?
  tags            String[] // Массив тегов
  
  // Алгоритм интервального повторения
  masteryLevel    Int      @default(0) // 0-5
  currentInterval Int      @default(1) // дни
  lastReviewDate  DateTime @default(now())
  nextReviewDate  DateTime @default(now())
  
  // Новые поля для режимов тренировки
  inputHistory    Json?    // История ввода: {correct: number, attempts: number, lastScore: number}
  synonyms        String[] @default([]) // Дополнительные варианты перевода
  
  // Связи
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews         Review[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("words")
}

model Review {
  id       String @id @default(cuid())
  rating   Int    // 1-4 (согласно ТЗ)
  
  // Новые поля для разных режимов
  reviewMode     ReviewMode @default(RECOGNITION)
  direction      ReviewDirection @default(LEARNING_TO_NATIVE) // с изучаемого на родной
  userInput      String?    // Что ввел пользователь (для режимов ввода)
  hintsUsed      Int        @default(0) // Количество использованных подсказок
  timeSpent      Int?       // Время в секундах
  
  // Связи
  wordId   String
  word     Word   @relation(fields: [wordId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@map("reviews")
}

// Режимы тренировки
enum ReviewMode {
  RECOGNITION        // Узнавание (текущий)
  TRANSLATION_INPUT  // Ввод перевода (с изучаемого на русский)
  REVERSE_INPUT     // Обратный ввод (с русского на изучаемый)
  MIXED             // Смешанный режим
}

// Направление перевода
enum ReviewDirection {
  LEARNING_TO_NATIVE  // с изучаемого языка на родной (корейский → русский)
  NATIVE_TO_LEARNING  // с родного на изучаемый (русский → корейский)
}

model Friendship {
  id       String @id @default(cuid())
  
  userId   String
  user     User   @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  
  cloudStreak  CloudStreak?
  
  friendId String
  friend   User   @relation("FriendOfUser", fields: [friendId], references: [id], onDelete: Cascade)
  
  status   FriendshipStatus @default(PENDING)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, friendId])
  @@map("friendships")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model CloudStreak {
  id           String   @id @default(cuid())
  
  // Связь с дружбой
  friendshipId String
  friendship   Friendship @relation(fields: [friendshipId], references: [id], onDelete: Cascade)
  
  // Статистика облачка
  currentStreak Int      @default(0) // Текущий стрик облачка в днях
  longestStreak Int      @default(0) // Самый длинный стрик
  lastActiveDate DateTime? // Последний день когда оба были активны
  
  // Для отслеживания активности каждого друга по дням
  user1LastActive DateTime? // Последняя активность первого пользователя
  user2LastActive DateTime? // Последняя активность второго пользователя
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([friendshipId])
  @@map("cloud_streaks")
}
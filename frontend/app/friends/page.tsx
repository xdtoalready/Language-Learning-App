// frontend/app/friends/page.tsx (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å SVG –æ–±–ª–∞—á–∫–∞–º–∏)
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation'
import { motion, AnimatePresence } from 'framer-motion';
import {
  MagnifyingGlassIcon,
  UserPlusIcon,
  UsersIcon,
  PaperAirplaneIcon,
  CheckIcon,
  UserIcon,
  XMarkIcon,
  ClockIcon,
  HeartIcon
} from '@heroicons/react/24/outline';
import { toast } from 'react-hot-toast';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Card, CardContent, CardHeader } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';
import { CloudStreak } from '@/components/ui/CloudStreak';
import DashboardLayout from '@/components/layout/DashboardLayout';
import { useFriends } from '@/store/useStore';
import { LANGUAGES } from '@/lib/utils';

type TabType = 'friends' | 'search' | 'requests';

export default function FriendsPage() {
  const [activeTab, setActiveTab] = useState<TabType>('friends');
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [hasLoadedInitially, setHasLoadedInitially] = useState(false);

  const {
    friends,
    pendingRequests,
    isLoadingFriends,
    loadFriends,
    loadPendingRequests,
    searchUsers,
    sendFriendRequest,
    respondToFriendRequest,
    removeFriend
  } = useFriends();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (!hasLoadedInitially) {
      console.log('üë• FriendsPage: –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞...');
      loadFriends();
      loadPendingRequests();
      setHasLoadedInitially(true);
    }
  }, [hasLoadedInitially, loadFriends, loadPendingRequests]);

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å debounce
    useEffect(() => {
    const timeoutId = setTimeout(async () => {
        if (searchQuery.trim().length >= 2) {
        setIsSearching(true);
        try {
            console.log('üîç –ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π:', searchQuery.trim());
            const results = await searchUsers(searchQuery.trim());
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', results);
            setSearchResults(results);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            toast.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            setSearchResults([]);
        } finally {
            setIsSearching(false);
        }
        } else {
        setSearchResults([]);
        setIsSearching(false);
        }
    }, 500);

    return () => clearTimeout(timeoutId);
    }, [searchQuery, searchUsers]);

    // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é:
// const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//   const value = e.target.value;
//   if (value.length <= 50) { // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ–∏—Å–∫–∞
//     setSearchQuery(value);
//   }
// };

  const handleSendFriendRequest = async (friendId: string) => {
    try {
      await sendFriendRequest(friendId);
      toast.success('–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
      if (searchQuery.trim().length >= 2) {
        const results = await searchUsers(searchQuery.trim());
        setSearchResults(results);
      }
    } catch (error: any) {
      toast.error(error?.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏');
    }
  };

  const handleRespondToRequest = async (friendshipId: string, action: 'accept' | 'reject') => {
    try {
      await respondToFriendRequest(friendshipId, action);
      toast.success(action === 'accept' ? '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!' : '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
    } catch (error: any) {
      toast.error(error?.message || '–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É');
    }
  };

  const handleRemoveFriend = async (friendshipId: string, username: string) => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å ${username} –∏–∑ –¥—Ä—É–∑–µ–π?`)) {
      try {
        await removeFriend(friendshipId);
        toast.success('–î—Ä—É–≥ —É–¥–∞–ª–µ–Ω');
      } catch (error: any) {
        toast.error(error?.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞');
      }
    }
  };

  const formatLastActive = (lastActiveDate: string | Date | null) => {
    if (!lastActiveDate) return '–¥–∞–≤–Ω–æ';
    
    const date = new Date(lastActiveDate);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    
    if (diffHours < 1) return '—Å–µ–π—á–∞—Å';
    if (diffHours < 24) return `${diffHours} —á. –Ω–∞–∑–∞–¥`;
    
    const diffDays = Math.floor(diffHours / 24);
    if (diffDays === 1) return '–≤—á–µ—Ä–∞';
    if (diffDays < 7) return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
  const renderAvatar = (avatar: string | null, size: string = 'w-16 h-16') => {
    if (!avatar) {
      return (
        <div className={`${size} bg-gradient-to-r from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white text-xl font-bold`}>
          üë§
        </div>
      );
    }

    // –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å data: (base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    if (avatar.startsWith('data:')) {
      return (
        <img 
          src={avatar} 
          alt="Avatar" 
          className={`${size} rounded-full object-cover border-2 border-white shadow-lg`}
        />
      );
    }

    // –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä - —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç
    return (
      <div className={`${size} bg-gradient-to-r from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-2xl`}>
        {avatar}
      </div>
    );
  };

  return (
    <DashboardLayout>
      <div className="max-w-6xl mx-auto space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">–î—Ä—É–∑—å—è</h1>
            <p className="text-gray-600 mt-1">
              –ò–∑—É—á–∞–π—Ç–µ —è–∑—ã–∫–∏ –≤–º–µ—Å—Ç–µ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞
            </p>
          </div>
          <Button 
            onClick={() => setActiveTab('search')} 
            className="flex items-center gap-2"
          >
            <UserPlusIcon className="h-4 w-4" />
            –ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π
          </Button>
        </div>

        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="border-b border-gray-200">
          <nav className="flex space-x-8">
            <button
              onClick={() => setActiveTab('friends')}
              className={`flex items-center gap-2 py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                activeTab === 'friends'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              <UsersIcon className="h-4 w-4" />
              –ú–æ–∏ –¥—Ä—É–∑—å—è ({friends.length})
            </button>
            <button
              onClick={() => setActiveTab('search')}
              className={`flex items-center gap-2 py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                activeTab === 'search'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              <MagnifyingGlassIcon className="h-4 w-4" />
              –ü–æ–∏—Å–∫
            </button>
            <button
              onClick={() => setActiveTab('requests')}
              className={`flex items-center gap-2 py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                activeTab === 'requests'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              <ClockIcon className="h-4 w-4" />
              –ó–∞—è–≤–∫–∏ ({pendingRequests.length})
            </button>
          </nav>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
        <AnimatePresence mode="wait">
            {activeTab === 'friends' && (
            <motion.div
                key="friends"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                className="space-y-4"
            >
                {isLoadingFriends ? (
                <div className="flex justify-center py-8">
                    <LoadingSpinner />
                </div>
                ) : friends.length === 0 ? (
                <Card>
                    <CardContent className="text-center py-12">
                    <UsersIcon className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                    <h3 className="text-xl font-medium text-gray-900 mb-2">–ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</h3>
                    <p className="text-gray-500 mb-6">
                        –ù–∞–π–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∏–∑—É—á–∞–π—Ç–µ —è–∑—ã–∫–∏ –≤–º–µ—Å—Ç–µ! –í–º–µ—Å—Ç–µ –≤–µ—Å–µ–ª–µ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.
                    </p>
                    <Button onClick={() => setActiveTab('search')}>
                        <UserPlusIcon className="h-4 w-4 mr-2" />
                        –ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π
                    </Button>
                    </CardContent>
                </Card>
                ) : (
                // –ò–ó–ú–ï–ù–ò–õ–ò: —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º 3 –∫–æ–ª–æ–Ω–∫–∏ –≤–º–µ—Å—Ç–æ 2
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {friends.map((friend) => (
                    <FriendCard 
                        key={friend.id} 
                        friend={friend} 
                        onRemove={() => handleRemoveFriend(friend.friendshipId, friend.username)}
                        formatLastActive={formatLastActive}
                        renderAvatar={renderAvatar}
                    />
                    ))}
                </div>
                )}
            </motion.div>
            )}

          {activeTab === 'search' && (
            <motion.div
              key="search"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="space-y-4"
            >
              <Card>
                <CardContent className="p-6">
                  <div className="relative">
                    <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <Input
                      type="text"
                      placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                  
                  {isSearching && (
                    <div className="flex justify-center py-4">
                      <LoadingSpinner size="sm" />
                    </div>
                  )}

                  {searchQuery.length > 0 && searchQuery.length < 2 && (
                    <p className="text-sm text-gray-500 mt-3">
                      –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                    </p>
                  )}

                  {searchResults.length === 0 && searchQuery.length >= 2 && !isSearching && (
                    <p className="text-sm text-gray-500 mt-3">
                      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    </p>
                  )}

                  {searchResults.length > 0 && (
                    <div className="mt-4 space-y-3">
                      {searchResults.map((user) => (
                        <UserSearchCard 
                          key={user.id} 
                          user={user} 
                          onSendRequest={() => handleSendFriendRequest(user.id)}
                          renderAvatar={renderAvatar}
                        />
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
            </motion.div>
          )}

          {activeTab === 'requests' && (
            <motion.div
              key="requests"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="space-y-4"
            >
              {pendingRequests.length === 0 ? (
                <Card>
                  <CardContent className="text-center py-12">
                    <ClockIcon className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                    <h3 className="text-xl font-medium text-gray-900 mb-2">–ù–µ—Ç –∑–∞—è–≤–æ–∫</h3>
                    <p className="text-gray-500">
                      –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è
                    </p>
                  </CardContent>
                </Card>
              ) : (
                <div className="space-y-4">
                  {pendingRequests.map((request) => (
                    <PendingRequestCard 
                      key={request.id} 
                      request={request} 
                      onRespond={(action) => handleRespondToRequest(request.id, action)}
                      renderAvatar={renderAvatar}
                    />
                  ))}
                </div>
              )}
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </DashboardLayout>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥—Ä—É–≥–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ–±–ª–∞—á–∫–æ–º
const FriendCard = ({ friend, onRemove, formatLastActive, renderAvatar }: { 
  friend: any; 
  onRemove: () => void;
  formatLastActive: (date: string | Date | null) => string; // –î–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç —Ç–∏–ø
  renderAvatar: (avatar: string | null, size?: string) => JSX.Element;
}) => {
  const router = useRouter(); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      className="bg-white border border-gray-200 rounded-xl p-6 hover:shadow-xl transition-all duration-300"
    >
      <div className="flex items-start justify-between">
        {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∞–≤–∞—Ç–∞—Ä –∏ –∏–Ω—Ñ–æ */}
        <div className="flex items-center gap-4">
          {renderAvatar(friend.avatar)}
          
          <div className="flex-1">
            <div className="flex items-center gap-2 mb-1">
              <h3 className="font-semibold text-lg text-gray-900">{friend.username}</h3>
              <span className="text-xl">
                {LANGUAGES[friend.learningLanguage as keyof typeof LANGUAGES]?.flag || 'üåç'}
              </span>
              {/* –ú–∞–ª–µ–Ω—å–∫–æ–µ –æ–±–ª–∞—á–∫–æ —Ä—è–¥–æ–º —Å –Ω–∏–∫–æ–º */}
              <CloudStreak days={friend.cloudStreak || 0} size="xs" />
            </div>
            
            <div className="flex items-center gap-4 text-sm text-gray-600 mb-2">
              <span className="flex items-center gap-1">
                üî• {friend.currentStreak || 0} –¥–Ω–µ–π
              </span>
              <span className="flex items-center gap-1">
                üìö {friend.totalWordsLearned || 0} —Å–ª–æ–≤
              </span>
            </div>
            
            <p className="text-xs text-gray-500">
              –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {formatLastActive(friend.lastActiveDate)}
            </p>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
        <Button
          variant="ghost"
          size="sm"
          onClick={onRemove}
          className="text-gray-400 hover:text-red-500"
        >
          <XMarkIcon className="h-4 w-4" />
        </Button>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è */}
      <div className="mt-4 flex justify-center">
        <Button
          variant="outline"
          size="sm"
          onClick={() => {
            router.push(`/friends/${friend.id}`);
          }}
          className="flex items-center gap-2"
        >
          <UserIcon className="h-4 w-4" />
          –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        </Button>
      </div>
    </motion.div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserSearchCard = ({ user, onSendRequest, renderAvatar }: { 
  user: any; 
  onSendRequest: () => void;
  renderAvatar: (avatar: string | null, size?: string) => JSX.Element;
}) => {
  const getStatusButton = () => {
    switch (user.friendshipStatus) {
      case 'friends':
        return (
          <Badge variant="success" className="flex items-center gap-1">
            <HeartIcon className="h-3 w-3" />
            –î—Ä—É–∑—å—è
          </Badge>
        );
      case 'sent':
        return (
          <Badge variant="secondary">–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</Badge>
        );
      case 'received':
        return (
          <Badge variant="warning">–ï—Å—Ç—å –∑–∞—è–≤–∫–∞</Badge>
        );
      case 'blocked':
        return (
          <Badge variant="destructive">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</Badge>
        );
      default:
        return (
          <Button size="sm" onClick={onSendRequest} className="flex items-center gap-1">
            <PaperAirplaneIcon className="h-3 w-3" />
            –î–æ–±–∞–≤–∏—Ç—å
          </Button>
        );
    }
  };

  return (
    <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
      <div className="flex items-center gap-3">
        {renderAvatar(user.avatar, 'w-12 h-12')}
        <div>
          <div className="flex items-center gap-2">
            <h4 className="font-medium text-gray-900">{user.username}</h4>
            <span className="text-sm">
              {LANGUAGES[user.learningLanguage as keyof typeof LANGUAGES]?.flag || 'üåç'}
            </span>
          </div>
          <div className="flex items-center gap-3 text-xs text-gray-500">
            <span>üî• {user.currentStreak || 0}</span>
            <span>üìö {user.totalWordsLearned || 0}</span>
            <span>–ò–∑—É—á–∞–µ—Ç {LANGUAGES[user.learningLanguage as keyof typeof LANGUAGES]?.name || user.learningLanguage}</span>
          </div>
        </div>
      </div>
      {getStatusButton()}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—Ö–æ–¥—è—â–µ–π –∑–∞—è–≤–∫–∏
const PendingRequestCard = ({ request, onRespond, renderAvatar }: { 
  request: any; 
  onRespond: (action: 'accept' | 'reject') => void;
  renderAvatar: (avatar: string | null, size?: string) => JSX.Element;
}) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white border border-gray-200 rounded-xl p-6"
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          {renderAvatar(request.user.avatar)}
          <div>
            <div className="flex items-center gap-2 mb-1">
              <h3 className="font-semibold text-lg text-gray-900">{request.user.username}</h3>
              <span className="text-xl">
                {LANGUAGES[request.user.learningLanguage as keyof typeof LANGUAGES]?.flag || 'üåç'}
              </span>
            </div>
            <div className="flex items-center gap-4 text-sm text-gray-600 mb-2">
              <span className="flex items-center gap-1">
                üî• {request.user.currentStreak || 0} –¥–Ω–µ–π
              </span>
              <span className="flex items-center gap-1">
                üìö {request.user.totalWordsLearned || 0} —Å–ª–æ–≤
              </span>
            </div>
            <p className="text-xs text-gray-500">
              –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {new Date(request.createdAt).toLocaleDateString()}
            </p>
          </div>
        </div>

        <div className="flex gap-2">
          <Button
            onClick={() => onRespond('accept')}
            className="flex items-center gap-1"
            size="sm"
          >
            <CheckIcon className="h-4 w-4" />
            –ü—Ä–∏–Ω—è—Ç—å
          </Button>
          <Button
            onClick={() => onRespond('reject')}
            variant="outline"
            size="sm"
            className="flex items-center gap-1"
          >
            <XMarkIcon className="h-4 w-4" />
            –û—Ç–∫–ª–æ–Ω–∏—Ç—å
          </Button>
        </div>
      </div>
    </motion.div>
  );
};
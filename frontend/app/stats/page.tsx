// app/stats/page.tsx
'use client';

import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import {
  ChartBarIcon,
  FireIcon,
  TrophyIcon,
  CalendarDaysIcon,
  AcademicCapIcon,
  ClockIcon,
  Cog6ToothIcon
} from '@heroicons/react/24/outline';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar
} from 'recharts';
import { useStats, useAuth } from '@/store/useStore';
import { Card, CardContent, CardHeader } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Modal } from '@/components/ui/Modal';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';
import DashboardLayout from '@/components/layout/DashboardLayout';
import {
  formatDate,
  formatDateShort,
  getStreakEmoji,
  getStreakText,
  MASTERY_LEVELS
} from '@/lib/utils';
import { toast } from 'react-hot-toast';

export default function StatsPage() {
  const [showGoalModal, setShowGoalModal] = useState(false);
  const [newGoal, setNewGoal] = useState('');
  
  const { userStats, isLoadingStats, loadUserStats, updateDailyGoal } = useStats();
  const { user } = useAuth();

  useEffect(() => {
    if (!userStats) {
      console.log('üìà StatsPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
      loadUserStats();
    }
  }, [loadUserStats, userStats]);

  const handleUpdateGoal = async () => {
    const goal = parseInt(newGoal);
    if (goal < 1 || goal > 100) {
      toast.error('–¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100');
      return;
    }

    try {
      await updateDailyGoal(goal);
      toast.success('–î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
      setShowGoalModal(false);
      setNewGoal('');
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏');
    }
  };

  const openGoalModal = () => {
    setNewGoal(user?.dailyGoal?.toString() || '10');
    setShowGoalModal(true);
  };

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const masteryData = userStats?.masteryDistribution ? Object.entries(userStats.masteryDistribution).map(([level, count]) => ({
    name: MASTERY_LEVELS[parseInt(level)]?.name || `–£—Ä–æ–≤–µ–Ω—å ${level}`,
    value: count,
    color: MASTERY_LEVELS[parseInt(level)]?.color || '#gray-500'
  })) : [];

  const weeklyData = userStats?.weeklyProgress || [];

  // –¶–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4'];

  return (
    <DashboardLayout>
      <div className="max-w-7xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <motion.h1
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="text-3xl font-bold text-gray-900"
            >
              –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </motion.h1>
            <motion.p
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.1 }}
              className="text-gray-600 mt-1"
            >
              –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞
            </motion.p>
          </div>
          
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
          >
            <Button
              onClick={openGoalModal}
              variant="outline"
              className="flex items-center"
            >
              <Cog6ToothIcon className="h-4 w-4 mr-2" />
              –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ª—å
            </Button>
          </motion.div>
        </div>

        {isLoadingStats ? (
          <div className="flex justify-center py-12">
            <LoadingSpinner size="lg" />
          </div>
        ) : (
          <>
            {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8"
            >
              {/* –û–±—â–∏–µ —Å–ª–æ–≤–∞ */}
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center">
                    <div className="p-3 bg-blue-100 rounded-lg">
                      <AcademicCapIcon className="h-6 w-6 text-blue-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">–ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {user?.totalWordsLearned || 0}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ */}
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center">
                    <div className="p-3 bg-orange-100 rounded-lg">
                      <FireIcon className="h-6 w-6 text-orange-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫</p>
                      <div className="flex items-center">
                        <p className="text-2xl font-bold text-gray-900 mr-2">
                          {user?.currentStreak || 0}
                        </p>
                        <span className="text-lg">
                          {getStreakEmoji(user?.currentStreak || 0)}
                        </span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* –õ—É—á—à–∏–π —Å—Ç—Ä–∏–∫ */}
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center">
                    <div className="p-3 bg-yellow-100 rounded-lg">
                      <TrophyIcon className="h-6 w-6 text-yellow-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">–õ—É—á—à–∏–π —Å—Ç—Ä–∏–∫</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {user?.longestStreak || 0}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* –î–Ω–∏ –∏–∑—É—á–µ–Ω–∏—è */}
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center">
                    <div className="p-3 bg-green-100 rounded-lg">
                      <CalendarDaysIcon className="h-6 w-6 text-green-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">–î–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {userStats?.totalStudyDays || 0}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>

            {/* –î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
            {userStats?.dailyProgress && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
                className="mb-8"
              >
                <Card>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <h3 className="text-lg font-semibold text-gray-900">
                        –î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                      </h3>
                      <Badge variant="primary">
                        {userStats.dailyProgress.completed} / {userStats.dailyProgress.goal}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <div className="flex justify-between mb-2">
                          <span className="text-sm font-medium text-gray-700">
                            –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
                          </span>
                          <span className="text-sm text-gray-600">
                            {Math.round((userStats.dailyProgress.completed / userStats.dailyProgress.goal) * 100)}%
                          </span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div
                            className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                            style={{
                              width: `${Math.min((userStats.dailyProgress.completed / userStats.dailyProgress.goal) * 100, 100)}%`
                            }}
                          ></div>
                        </div>
                      </div>
                      
                      <div className="text-center">
                        <p className="text-sm text-gray-600">
                          {userStats.dailyProgress.completed >= userStats.dailyProgress.goal
                            ? 'üéâ –î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!'
                            : `–û—Å—Ç–∞–ª–æ—Å—å ${userStats.dailyProgress.goal - userStats.dailyProgress.completed} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ —Ü–µ–ª–∏`
                          }
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            )}

            {/* –ì—Ä–∞—Ñ–∏–∫–∏ */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
              {/* –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.4 }}
              >
                <Card>
                  <CardHeader>
                    <h3 className="text-lg font-semibold text-gray-900">
                      –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
                    </h3>
                  </CardHeader>
                  <CardContent>
                    {masteryData.length > 0 ? (
                      <div className="h-64">
                        <ResponsiveContainer width="100%" height="100%">
                          <PieChart>
                            <Pie
                              data={masteryData}
                              cx="50%"
                              cy="50%"
                              labelLine={false}
                              label={({ name, value }) => `${name}: ${value}`}
                              outerRadius={80}
                              fill="#8884d8"
                              dataKey="value"
                            >
                              {masteryData.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                              ))}
                            </Pie>
                            <Tooltip />
                          </PieChart>
                        </ResponsiveContainer>
                      </div>
                    ) : (
                      <div className="h-64 flex items-center justify-center text-gray-500">
                        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </motion.div>

              {/* –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.5 }}
              >
                <Card>
                  <CardHeader>
                    <h3 className="text-lg font-semibold text-gray-900">
                      –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é
                    </h3>
                  </CardHeader>
                  <CardContent>
                    {weeklyData.length > 0 ? (
                      <div className="h-64">
                        <ResponsiveContainer width="100%" height="100%">
                          <BarChart data={weeklyData}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis 
                              dataKey="date" 
                              tickFormatter={(value) => formatDateShort(new Date(value))}
                            />
                            <YAxis />
                            <Tooltip 
                              labelFormatter={(value) => formatDate(new Date(value))}
                              formatter={(value) => [value, '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π']}
                            />
                            <Bar dataKey="reviews" fill="#3B82F6" />
                          </BarChart>
                        </ResponsiveContainer>
                      </div>
                    ) : (
                      <div className="h-64 flex items-center justify-center text-gray-500">
                        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </motion.div>
            </div>

            {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.6 }}
            >
              <Card>
                <CardHeader>
                  <h3 className="text-lg font-semibold text-gray-900">
                    –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                  </h3>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ü–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ */}
                    <div className={`p-4 rounded-lg border-2 ${
                      (user?.totalWordsLearned || 0) >= 1 
                        ? 'border-green-200 bg-green-50' 
                        : 'border-gray-200 bg-gray-50'
                    }`}>
                      <div className="flex items-center mb-2">
                        <AcademicCapIcon className={`h-6 w-6 mr-2 ${
                          (user?.totalWordsLearned || 0) >= 1 ? 'text-green-600' : 'text-gray-400'
                        }`} />
                        <h4 className="font-medium">–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏</h4>
                      </div>
                      <p className="text-sm text-gray-600">–ò–∑—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ</p>
                      <div className="mt-2">
                        <Badge variant={
                          (user?.totalWordsLearned || 0) >= 1 ? 'success' : 'secondary'
                        }>
                          {(user?.totalWordsLearned || 0) >= 1 ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                        </Badge>
                      </div>
                    </div>

                    {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –°—Ç—Ä–∏–∫ */}
                    <div className={`p-4 rounded-lg border-2 ${
                      (user?.currentStreak || 0) >= 7 
                        ? 'border-orange-200 bg-orange-50' 
                        : 'border-gray-200 bg-gray-50'
                    }`}>
                      <div className="flex items-center mb-2">
                        <FireIcon className={`h-6 w-6 mr-2 ${
                          (user?.currentStreak || 0) >= 7 ? 'text-orange-600' : 'text-gray-400'
                        }`} />
                        <h4 className="font-medium">–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥</h4>
                      </div>
                      <p className="text-sm text-gray-600">–ò–∑—É—á–∞—Ç—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥</p>
                      <div className="mt-2">
                        <Badge variant={
                          (user?.currentStreak || 0) >= 7 ? 'warning' : 'secondary'
                        }>
                          {(user?.currentStreak || 0) >= 7 ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : `${user?.currentStreak || 0}/7`}
                        </Badge>
                      </div>
                    </div>

                    {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ú–Ω–æ–≥–æ —Å–ª–æ–≤ */}
                    <div className={`p-4 rounded-lg border-2 ${
                      (user?.totalWordsLearned || 0) >= 100 
                        ? 'border-purple-200 bg-purple-50' 
                        : 'border-gray-200 bg-gray-50'
                    }`}>
                      <div className="flex items-center mb-2">
                        <TrophyIcon className={`h-6 w-6 mr-2 ${
                          (user?.totalWordsLearned || 0) >= 100 ? 'text-purple-600' : 'text-gray-400'
                        }`} />
                        <h4 className="font-medium">–ó–Ω–∞—Ç–æ–∫ —Å–ª–æ–≤</h4>
                      </div>
                      <p className="text-sm text-gray-600">–ò–∑—É—á–∏—Ç—å 100 —Å–ª–æ–≤</p>
                      <div className="mt-2">
                        <Badge variant={
                          (user?.totalWordsLearned || 0) >= 100 ? 'primary' : 'secondary'
                        }>
                          {(user?.totalWordsLearned || 0) >= 100 
                            ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' 
                            : `${user?.totalWordsLearned || 0}/100`
                          }
                        </Badge>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–ª–∏ */}
      <Modal
        isOpen={showGoalModal}
        onClose={() => setShowGoalModal(false)}
        title="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å"
      >
        <div className="p-6">
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –¥–µ–Ω—å
            </label>
            <Input
              type="number"
              min="1"
              max="100"
              value={newGoal}
              onChange={(e) => setNewGoal(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            />
            <p className="text-sm text-gray-500 mt-1">
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å 10-20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –¥–µ–Ω—å
            </p>
          </div>
          
          <div className="flex gap-3 justify-end">
            <Button
              variant="ghost"
              onClick={() => setShowGoalModal(false)}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleUpdateGoal}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </div>
        </div>
      </Modal>
    </DashboardLayout>
  );
}
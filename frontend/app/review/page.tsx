'use client';

import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useRouter, useSearchParams } from 'next/navigation';
import { toast } from 'react-hot-toast';
import {
  ArrowLeftIcon,
  HomeIcon,
  EyeIcon,
  EyeSlashIcon,
  PencilIcon,
  ArrowsRightLeftIcon
} from '@heroicons/react/24/outline';
import { useReview, useAuth } from '@/store/useStore';
import { Button } from '@/components/ui/Button';
import { Card, CardContent } from '@/components/ui/Card';
import { ProgressBar } from '@/components/ui/ProgressBar';
import { Badge } from '@/components/ui/Badge';
import { TranslationInput } from '@/components/ui/TranslationInput';
import { ReviewMode, ReviewDirection } from '@/types/api';

// –û–ø—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ Recognition
const RATING_OPTIONS = [
  { value: 1, label: '–°–ª–æ–∂–Ω–æ', emoji: 'üò´', color: 'bg-red-500 hover:bg-red-600', description: '–ù–µ –ø–æ–º–Ω—é' },
  { value: 2, label: '–¢—Ä—É–¥–Ω–æ', emoji: 'üòê', color: 'bg-orange-500 hover:bg-orange-600', description: '–° —Ç—Ä—É–¥–æ–º' },
  { value: 3, label: '–•–æ—Ä–æ—à–æ', emoji: 'üòä', color: 'bg-blue-500 hover:bg-blue-600', description: '–ü–æ–º–Ω—é' },
  { value: 4, label: '–õ–µ–≥–∫–æ', emoji: 'üòé', color: 'bg-green-500 hover:bg-green-600', description: '–õ–µ–≥–∫–æ' }
];

export default function ReviewPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const { isAuthenticated } = useAuth();
  
  const { 
    currentSession,
    sessionType,
    reviewMode,
    currentDirection,
    currentRound,
    isReviewSession, 
    currentReviewWord, 
    hasMoreWords, 
    remainingWords,
    createReviewSession,
    submitReviewInSession,
    endSessionNew,
    isSessionCompleted
  } = useReview();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ Recognition
  const [showTranslation, setShowTranslation] = useState(false);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
  const [sessionStats, setSessionStats] = useState({
    total: 0,
    correct: 0,
    totalWords: 0,
    ratings: { 1: 0, 2: 0, 3: 0, 4: 0 }
  });

  // üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
  const sessionCreatedRef = useRef(false);
  const isCreatingSession = useRef(false);
  
  // –ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
  const urlSessionType = searchParams.get('sessionType') as 'daily' | 'training' || 'daily';
  const urlMode = searchParams.get('mode') as ReviewMode || 'RECOGNITION';

  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
useEffect(() => {
  if (!isAuthenticated) {
    router.push('/auth');
    return;
  }

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
  if (sessionCreatedRef.current || isCreatingSession.current) {
    console.log('üõ°Ô∏è –ó–∞—â–∏—Ç–∞: —Å–µ—Å—Å–∏—è —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∞');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç
  const shouldCreateSession = !currentSession && 
                              !isReviewSession && 
                              (searchParams.get('sessionType') || searchParams.get('mode'));

  if (shouldCreateSession) {
    console.log('üîÑ ReviewPage: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...', {
      sessionType: urlSessionType,
      mode: urlMode,
      hasCurrentSession: !!currentSession,
      isReviewSession
    });
    
    isCreatingSession.current = true;
    sessionCreatedRef.current = true;
    
    createReviewSession(urlMode, urlSessionType)
      .then((response) => {
        console.log('‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (response?.session && response.session.sessionId) {
          // –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
          const totalWords = response.session.totalWords || 
                           (response.remainingWords + (response.currentWord ? 1 : 0));
          setSessionStats(prev => ({
            ...prev,
            totalWords,
            total: 0,
            correct: 0
          }));
          console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–µ—Å—Å–∏–∏:', { totalWords });
        } else {
          // –î–ª—è –ø—É—Å—Ç–æ–π —Å–µ—Å—Å–∏–∏ (–Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è)
          setSessionStats(prev => ({
            ...prev,
            totalWords: 0,
            total: 0,
            correct: 0
          }));
          console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—É—Å—Ç–æ–π —Å–µ—Å—Å–∏–∏');
        }
      })
      .catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è');
        router.push('/dashboard');
      })
      .finally(() => {
        isCreatingSession.current = false;
      });
  }
}, [isAuthenticated, currentSession, isReviewSession]);

  // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Å—Å–∏–∏
useEffect(() => {
    if (!currentSession && !isReviewSession) {
      sessionCreatedRef.current = false;
      isCreatingSession.current = false;
    }
  }, [currentSession, isReviewSession]);

  const validateSession = () => {
    if (!currentSession) {
      console.error('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
      toast.error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é.');
      router.push('/dashboard');
      return false;
    }

    if (!currentReviewWord && !isSessionCompleted) {
      console.error('‚ùå –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞');
      toast.error('–°–ª–æ–≤–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      return false;
    }

    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—à–ª–∞:', {
      sessionId: currentSession.sessionId,
      wordId: currentReviewWord?.id,
      word: currentReviewWord?.word,
      isCompleted: isSessionCompleted
    });

    return true;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ Recognition
const handleSubmitRating = async (rating: number) => {
    if (!currentReviewWord || !currentSession) return;

    try {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      setSessionStats(prev => ({
        ...prev,
        total: prev.total + 1,
        correct: prev.correct + (rating >= 3 ? 1 : 0),
        ratings: {
          ...prev.ratings,
          [rating]: prev.ratings[rating as keyof typeof prev.ratings] + 1
        }
      }));

      await submitReviewInSession({
        wordId: currentReviewWord.id,
        rating,
        reviewMode: 'RECOGNITION',
        direction: currentDirection,
        timeSpent: 0
      });

      setShowTranslation(false);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setSessionStats(prev => ({
        ...prev,
        total: Math.max(0, prev.total - 1),
        correct: prev.correct - (rating >= 3 ? 1 : 0),
        ratings: {
          ...prev.ratings,
          [rating]: Math.max(0, prev.ratings[rating as keyof typeof prev.ratings] - 1)
        }
      }));
    }
  };

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ Translation/Reverse
const handleTranslationSubmit = async (userInput: string, hintsUsed: number, timeSpent: number) => {
    if (!validateSession()) return;

    try {
      console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–≤—å—é –ø–µ—Ä–µ–≤–æ–¥–∞:', {
        sessionId: currentSession!.sessionId,
        wordId: currentReviewWord!.id,
        userInput,
        hintsUsed,
        timeSpent,
        reviewMode,
        direction: currentDirection
      });

      const response = await submitReviewInSession({
        wordId: currentReviewWord!.id,
        userInput,
        hintsUsed,
        timeSpent,
        reviewMode,
        direction: currentDirection
      });

      console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response);

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
      if (response.completed || !response.hasMoreWords || isSessionCompleted) {
        console.log('üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        setSessionStats(prev => ({
          ...prev,
          total: prev.total + 1,
          correct: prev.correct + (response.evaluation?.score >= 3 ? 1 : 0),
          ratings: {
            ...prev.ratings,
            [response.evaluation?.score || 3]: prev.ratings[response.evaluation?.score as keyof typeof prev.ratings] + 1
          }
        }));
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
      if (response.currentWord) {
        setSessionStats(prev => ({
          ...prev,
          total: prev.total + 1,
          correct: prev.correct + (response.evaluation?.score >= 3 ? 1 : 0),
          ratings: {
            ...prev.ratings,
            [response.evaluation?.score || 3]: prev.ratings[response.evaluation?.score as keyof typeof prev.ratings] + 1
          }
        }));
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
      
      if (error instanceof Error && error.message.includes('Session not found')) {
        toast.error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é...');
        router.push('/dashboard');
      } else {
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
      }
    }
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  const handleEndSession = async () => {
    try {
      if (currentSession) {
        await endSessionNew();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    } finally {
      router.push('/dashboard');
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const getWordToShow = () => {
    if (!currentReviewWord) return '';
    
    return currentDirection === 'LEARNING_TO_NATIVE' 
      ? currentReviewWord.word 
      : currentReviewWord.translation;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  const getExpectedAnswer = () => {
    if (!currentReviewWord) return '';
    
    return currentDirection === 'LEARNING_TO_NATIVE' 
      ? currentReviewWord.translation 
      : currentReviewWord.word;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞
  const getModeIcon = () => {
    switch (reviewMode) {
      case 'RECOGNITION': return EyeIcon;
      case 'TRANSLATION_INPUT': return PencilIcon;
      case 'REVERSE_INPUT': return ArrowsRightLeftIcon;
      default: return EyeIcon;
    }
  };

  // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    const isLoading = isCreatingSession.current || 
                 (sessionCreatedRef.current && !currentSession && !isSessionCompleted) ||
                 (!currentReviewWord && hasMoreWords && !isSessionCompleted);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
const isCompleted = isSessionCompleted || 
                   (!hasMoreWords && isReviewSession && !isLoading && sessionCreatedRef.current);

const getProgress = () => {
  if (sessionStats.totalWords === 0) return 0;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const currentProgress = (sessionStats.total / sessionStats.totalWords) * 100;
  const clampedProgress = Math.min(Math.max(currentProgress, 0), 100);
  
  console.log('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:', {
    total: sessionStats.total,
    totalWords: sessionStats.totalWords,
    progress: clampedProgress,
    remainingWords
  });
  
  return clampedProgress;
};

  // –ï—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-2 text-gray-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</p>
        </div>
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-2 text-gray-600">
            {isCreatingSession.current ? '–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...' : '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞...'}
          </p>
        </div>
      </div>
    );
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏
 if (isCompleted) {
  const ModeIcon = getModeIcon();
  
  console.log('üéâ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', {
    isSessionCompleted,
    hasMoreWords,
    isReviewSession,
    sessionStats,
    currentSession: !!currentSession
  });
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–ª–æ–≤–∞
// const hasWordsToShow = sessionStats.totalWords > 0;
    
    return (
      <div className="min-h-screen bg-gradient-to-b from-green-50 to-white">
        <div className="max-w-2xl mx-auto px-4 py-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center space-y-6"
          >
            <div className="text-6xl">üéâ</div>
            <h1 className="text-3xl font-bold text-gray-900">
              –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
            </h1>
            
            <Card>
              <CardContent className="p-6">
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                  <div>
                    <div className="text-2xl font-bold text-blue-600">{sessionStats.total}</div>
                    <div className="text-sm text-gray-600">–í—Å–µ–≥–æ —Å–ª–æ–≤</div>
                  </div>
                  <div>
                    <div className="text-2xl font-bold text-green-600">{sessionStats.correct}</div>
                    <div className="text-sm text-gray-600">–ü—Ä–∞–≤–∏–ª—å–Ω–æ</div>
                  </div>
                  <div>
                    <div className="text-2xl font-bold text-orange-600">
                      {sessionStats.total > 0 ? Math.round((sessionStats.correct / sessionStats.total) * 100) : 0}%
                    </div>
                    <div className="text-sm text-gray-600">–¢–æ—á–Ω–æ—Å—Ç—å</div>
                  </div>
                  <div>
                    <div className="flex items-center justify-center">
                      <ModeIcon className="h-6 w-6 text-gray-600" />
                    </div>
                    <div className="text-sm text-gray-600">
                      {reviewMode === 'RECOGNITION' ? '–£–∑–Ω–∞–≤–∞–Ω–∏–µ' :
                       reviewMode === 'TRANSLATION_INPUT' ? '–í–≤–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞' :
                       reviewMode === 'REVERSE_INPUT' ? '–û–±—Ä–∞—Ç–Ω—ã–π –≤–≤–æ–¥' : '–†–µ–∂–∏–º'}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button
                onClick={() => router.push('/dashboard')}
                className="flex items-center space-x-2"
              >
                <HomeIcon className="h-4 w-4" />
                <span>–ù–∞ –≥–ª–∞–≤–Ω—É—é</span>
              </Button>
              
              <Button
                variant="outline"
                onClick={() => {
                  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                  sessionCreatedRef.current = false;
                  isCreatingSession.current = false;
                  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                  window.location.reload();
                }}
                className="flex items-center space-x-2"
              >
                <ArrowsRightLeftIcon className="h-4 w-4" />
                <span>–ï—â–µ —Ä–∞–∑</span>
              </Button>
            </div>
          </motion.div>
        </div>
      </div>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto px-4 py-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π */}
        <div className="flex items-center justify-between mb-6">
          <Button
            variant="ghost"
            onClick={() => router.push('/dashboard')}
            className="flex items-center space-x-2"
          >
            <ArrowLeftIcon className="h-4 w-4" />
            <span>–ù–∞–∑–∞–¥</span>
          </Button>

          <div className="flex items-center space-x-3">
            <Badge variant={sessionType === 'daily' ? 'default' : 'secondary'}>
              {sessionType === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è' : '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'}
            </Badge>
            {currentRound && currentRound > 1 && (
              <Badge variant="outline">
                –†–∞—É–Ω–¥ {currentRound}
              </Badge>
            )}
          </div>

          <Button
            variant="ghost"
            onClick={handleEndSession}
            className="text-red-600 hover:text-red-700"
          >
            –ó–∞–≤–µ—Ä—à–∏—Ç—å
          </Button>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
        <div className="mb-8">
            <div className="flex justify-between items-center mb-2">
                <span className="text-sm font-medium text-gray-700">
                –ü—Ä–æ–≥—Ä–µ—Å—Å
                </span>
                <span className="text-sm text-gray-500">
                {sessionStats.total} –∏–∑ {sessionStats.totalWords} —Å–ª–æ–≤
                </span>
            </div>
            <ProgressBar 
                value={getProgress()}
                max={100}
                className="h-2"
                color="blue"
                showSessionProgress={true}
                currentSession={currentSession}
                remainingWords={remainingWords}
                reviewMode={reviewMode}
                currentRound={currentRound}
            />
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ */}
        <AnimatePresence mode="wait">
          {/* –†–µ–∂–∏–º Recognition */}
          {reviewMode === 'RECOGNITION' && currentReviewWord && (
            <motion.div
              key="recognition"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="space-y-6"
            >
              {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ —Å–ª–æ–≤–æ–º */}
              <Card className="border-2 border-gray-200">
                <CardContent className="p-8 text-center">
                  <div className="space-y-4">
                    <h2 className="text-3xl font-bold text-gray-900">
                      {getWordToShow()}
                    </h2>
                    {currentReviewWord.transcription && (
                      <p className="text-lg text-gray-600">
                        [{currentReviewWord.transcription}]
                      </p>
                    )}
                    {currentReviewWord.example && !showTranslation && (
                      <p className="text-gray-700 italic">
                        "{currentReviewWord.example}"
                      </p>
                    )}
                    <div className="pt-4">
                      <Button
                        onClick={() => setShowTranslation(!showTranslation)}
                        variant="outline"
                        className="flex items-center space-x-2"
                      >
                        {showTranslation ? (
                          <EyeSlashIcon className="h-4 w-4" />
                        ) : (
                          <EyeIcon className="h-4 w-4" />
                        )}
                        <span>
                          {showTranslation ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} –ø–µ—Ä–µ–≤–æ–¥
                        </span>
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* –ü–µ—Ä–µ–≤–æ–¥ */}
              <AnimatePresence>
                {showTranslation && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                  >
                    <Card className="border-2 border-blue-200 bg-blue-50">
                      <CardContent className="p-6 text-center">
                        <h3 className="text-xl font-semibold text-blue-900">
                          {getExpectedAnswer()}
                        </h3>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}
              </AnimatePresence>

              {/* –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ */}
              {showTranslation && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="grid grid-cols-2 md:grid-cols-4 gap-4"
                >
                  {RATING_OPTIONS.map((option) => (
                    <Button
                      key={option.value}
                      onClick={() => handleSubmitRating(option.value)}
                      className={`${option.color} text-white h-16 flex flex-col items-center justify-center space-y-1`}
                    >
                      <span className="text-xl">{option.emoji}</span>
                      <span className="text-sm font-medium">{option.label}</span>
                    </Button>
                  ))}
                </motion.div>
              )}
            </motion.div>
          )}

          {/* –†–µ–∂–∏–º—ã –≤–≤–æ–¥–∞ */}
          {(reviewMode === 'TRANSLATION_INPUT' || reviewMode === 'REVERSE_INPUT') && currentReviewWord && (
            <motion.div
              key="input"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
            >
              <TranslationInput
                word={getWordToShow()}
                expectedAnswer={getExpectedAnswer()}
                direction={currentDirection}
                wordId={currentReviewWord.id}
                transcription={currentReviewWord.transcription}
                example={currentReviewWord.example}
                onSubmit={handleTranslationSubmit}
              />
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}
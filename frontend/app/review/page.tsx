'use client';

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useRouter, useSearchParams } from 'next/navigation';
import { toast } from 'react-hot-toast';
import {
  ArrowLeftIcon,
  HomeIcon,
  EyeIcon,
  EyeSlashIcon,
  PencilIcon,
  ArrowsRightLeftIcon
} from '@heroicons/react/24/outline';
import { useReview, useAuth } from '@/store/useStore';
import { Button } from '@/components/ui/Button';
import { Card, CardContent } from '@/components/ui/Card';
import { ProgressBar } from '@/components/ui/ProgressBar';
import { Badge } from '@/components/ui/Badge';
import { TranslationInput } from '@/components/ui/TranslationInput';
import { ReviewMode, ReviewDirection } from '@/types/api';

// –û–ø—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ Recognition
const RATING_OPTIONS = [
  { value: 1, label: '–°–ª–æ–∂–Ω–æ', emoji: 'üò´', color: 'bg-red-500 hover:bg-red-600', description: '–ù–µ –ø–æ–º–Ω—é' },
  { value: 2, label: '–¢—Ä—É–¥–Ω–æ', emoji: 'üòê', color: 'bg-orange-500 hover:bg-orange-600', description: '–° —Ç—Ä—É–¥–æ–º' },
  { value: 3, label: '–•–æ—Ä–æ—à–æ', emoji: 'üòä', color: 'bg-blue-500 hover:bg-blue-600', description: '–ü–æ–º–Ω—é' },
  { value: 4, label: '–õ–µ–≥–∫–æ', emoji: 'üòé', color: 'bg-green-500 hover:bg-green-600', description: '–õ–µ–≥–∫–æ' }
];

export default function ReviewPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const { isAuthenticated } = useAuth();
  
  const { 
    currentSession,
    sessionType,
    reviewMode,
    currentDirection,
    currentRound,
    isReviewSession, 
    currentReviewWord, 
    hasMoreWords, 
    remainingWords,
    createReviewSession,
    submitReviewInSession,
    endSessionNew
  } = useReview();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ Recognition
  const [showTranslation, setShowTranslation] = useState(false);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
  const [sessionStats, setSessionStats] = useState({
    total: 0,
    correct: 0,
    ratings: { 1: 0, 2: 0, 3: 0, 4: 0 }
  });

  // –ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
  const urlSessionType = searchParams.get('sessionType') as 'daily' | 'training' || 'daily';
  const urlMode = searchParams.get('mode') as ReviewMode || 'RECOGNITION';

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    useEffect(() => {
    if (!isAuthenticated) {
        router.push('/auth');
        return;
    }

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –ò –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    if (!isReviewSession && !currentSession && (searchParams.get('sessionType') || searchParams.get('mode'))) {
        console.log('üîÑ ReviewPage: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...', {
        sessionType: urlSessionType,
        mode: urlMode,
        hasCurrentSession: !!currentSession,
        isReviewSession
        });
        
        createReviewSession(urlMode, urlSessionType).catch((error) => {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è');
        router.push('/dashboard');
        });
    }
    }, [isAuthenticated, isReviewSession, currentSession, urlSessionType, urlMode, createReviewSession, router, searchParams]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ Recognition
  const handleSubmitRating = async (rating: number) => {
    if (!currentReviewWord || !currentSession) return;

    try {
      setSessionStats(prev => ({
        total: prev.total + 1,
        correct: prev.correct + (rating >= 3 ? 1 : 0),
        ratings: {
          ...prev.ratings,
          [rating]: prev.ratings[rating as keyof typeof prev.ratings] + 1
        }
      }));

      await submitReviewInSession({
        wordId: currentReviewWord.id,
        rating,
        reviewMode: 'RECOGNITION',
        direction: currentDirection,
        timeSpent: 0 // –í —Ä–µ–∂–∏–º–µ Recognition –≤—Ä–µ–º—è –Ω–µ –∑–∞—Å–µ–∫–∞–µ—Ç—Å—è
      });

      setShowTranslation(false);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ Translation/Reverse
  const handleTranslationSubmit = async (userInput: string, hintsUsed: number, timeSpent: number) => {
    if (!currentReviewWord || !currentSession) return;

    try {
      const response = await submitReviewInSession({
        wordId: currentReviewWord.id,
        userInput,
        hintsUsed,
        timeSpent,
        reviewMode,
        direction: currentDirection
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ—Ü–µ–Ω–∫–∞ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
      setSessionStats(prev => ({
        total: prev.total + 1,
        correct: prev.correct + 1, // –£–ø—Ä–æ—â–µ–Ω–Ω–æ —Å—á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
        ratings: {
          ...prev.ratings,
          3: prev.ratings[3] + 1 // –£–ø—Ä–æ—â–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫ "—Ö–æ—Ä–æ—à–æ"
        }
      }));

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    }
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  const handleEndSession = async () => {
    try {
      if (currentSession) {
        await endSessionNew();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    } finally {
      router.push('/dashboard');
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const getWordToShow = () => {
    if (!currentReviewWord) return '';
    
    return currentDirection === 'LEARNING_TO_NATIVE' 
      ? currentReviewWord.word 
      : currentReviewWord.translation;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  const getExpectedAnswer = () => {
    if (!currentReviewWord) return '';
    
    return currentDirection === 'LEARNING_TO_NATIVE' 
      ? currentReviewWord.translation 
      : currentReviewWord.word;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ä–µ–∂–∏–º–∞
  const getModeIcon = () => {
    switch (reviewMode) {
      case 'RECOGNITION':
        return EyeIcon;
      case 'TRANSLATION_INPUT':
        return PencilIcon;
      case 'REVERSE_INPUT':
        return ArrowsRightLeftIcon;
      default:
        return EyeIcon;
    }
  };

  const getModeTitle = () => {
    switch (reviewMode) {
      case 'RECOGNITION':
        return '–£–∑–Ω–∞–≤–∞–Ω–∏–µ';
      case 'TRANSLATION_INPUT':
        return '–í–≤–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞';
      case 'REVERSE_INPUT':
        return '–û–±—Ä–∞—Ç–Ω—ã–π –≤–≤–æ–¥';
      default:
        return '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ';
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600">–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...</p>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
  if (!isReviewSession || (!currentReviewWord && !hasMoreWords)) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-blue-50 flex items-center justify-center p-4">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="max-w-md w-full"
        >
          <Card>
            <CardContent className="p-8 text-center">
              <h1 className="text-2xl font-bold text-gray-900 mb-2">
                –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ
              </h1>
              <p className="text-gray-600 mb-6">
                –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–µ—Å—Å–∏—é {sessionType === 'daily' ? '–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è' : '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'}!
              </p>
              
              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ */}
              <div className="bg-gray-50 rounded-lg p-4 mb-6">
                <h3 className="font-medium text-gray-900 mb-3">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:</h3>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600">–í—Å–µ–≥–æ —Å–ª–æ–≤:</span>
                    <span className="ml-2 font-medium">{sessionStats.total}</span>
                  </div>
                  <div>
                    <span className="text-gray-600">–ü—Ä–∞–≤–∏–ª—å–Ω–æ:</span>
                    <span className="ml-2 font-medium text-green-600">
                      {sessionStats.correct}
                    </span>
                  </div>
                </div>
                
                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ü–µ–Ω–∫–∞–º —Ç–æ–ª—å–∫–æ –¥–ª—è Recognition */}
                {reviewMode === 'RECOGNITION' && (
                  <div className="mt-3 pt-3 border-t border-gray-200">
                    <div className="flex justify-between text-xs">
                      {Object.entries(sessionStats.ratings).map(([rating, count]) => (
                        <div key={rating} className="text-center">
                          <div className="text-lg">
                            {RATING_OPTIONS.find(opt => opt.value === parseInt(rating))?.emoji || 'üòê'}
                          </div>
                          <div className="font-medium">{count}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              <Button onClick={handleEndSession} className="w-full">
                <HomeIcon className="h-4 w-4 mr-2" />
                –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    );
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞
  if (!currentReviewWord) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p className="text-gray-600">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è...</p>
        </div>
      </div>
    );
  }

    const totalWords = currentSession?.totalWords || 0;
    const completedWords = totalWords - (remainingWords || 0);
    const progressPercentage = totalWords > 0 ? Math.round((completedWords / totalWords) * 100) : 0;
  const ModeIcon = getModeIcon();

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º */}
      <div className="bg-white shadow-sm border-b border-gray-200 px-6 py-4">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center justify-between mb-4">
            <button
              onClick={handleEndSession}
              className="flex items-center text-gray-600 hover:text-gray-900 transition-colors"
            >
              <ArrowLeftIcon className="h-5 w-5 mr-2" />
              –í—ã–π—Ç–∏
            </button>
            
            <div className="text-center">
              <div className="flex items-center justify-center space-x-2 mb-1">
                <ModeIcon className="h-5 w-5 text-blue-600" />
                <h1 className="text-lg font-semibold text-gray-900">
                  {getModeTitle()}
                </h1>
              </div>
              <div className="flex items-center space-x-2">
                <Badge variant={sessionType === 'daily' ? 'default' : 'secondary'}>
                  {sessionType === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è' : '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'}
                </Badge>
                {reviewMode === 'TRANSLATION_INPUT' && (
                  <Badge variant="outline">
                    –†–∞—É–Ω–¥ {currentRound}/2
                  </Badge>
                )}
              </div>
            </div>

            <div className="text-right">
              <p className="text-sm text-gray-600">–û—Å—Ç–∞–ª–æ—Å—å</p>
              <p className="text-lg font-semibold text-gray-900">{remainingWords}</p>
            </div>
          </div>

          <div className="space-y-2">
            {/* <div className="flex justify-between text-sm text-gray-600">
              <span>{completedWords} –∏–∑ {totalWords}</span>
              <span>{progressPercentage}%</span>
            </div>
            <ProgressBar progress={progress} /> */}
            <ProgressBar 
  showSessionProgress={true}
  currentSession={currentSession}
  remainingWords={remainingWords}
  reviewMode={reviewMode}
  currentRound={currentRound}
  color="blue"
  className="mb-6"
/>
          </div>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="max-w-4xl mx-auto px-6 py-8">
        <AnimatePresence mode="wait">
          {/* –†–µ–∂–∏–º Recognition */}
          {reviewMode === 'RECOGNITION' && (
            <motion.div
              key="recognition"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="space-y-6"
            >
              {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–ª–æ–≤–∞ */}
              <Card className="border-0 shadow-lg">
                <CardContent className="p-8 text-center">
                  <div className="space-y-4">
                    <h2 className="text-3xl font-bold text-gray-900">
                      {getWordToShow()}
                    </h2>
                    
                    {currentReviewWord.transcription && (
                      <p className="text-gray-600">
                        [{currentReviewWord.transcription}]
                      </p>
                    )}
                    
                    {currentReviewWord.example && (
                      <p className="text-gray-500 italic">
                        "{currentReviewWord.example}"
                      </p>
                    )}
                    
                    <div className="pt-4">
                      <Button
                        onClick={() => setShowTranslation(!showTranslation)}
                        variant="outline"
                        className="flex items-center space-x-2"
                      >
                        {showTranslation ? (
                          <EyeSlashIcon className="h-4 w-4" />
                        ) : (
                          <EyeIcon className="h-4 w-4" />
                        )}
                        <span>
                          {showTranslation ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} –ø–µ—Ä–µ–≤–æ–¥
                        </span>
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* –ü–µ—Ä–µ–≤–æ–¥ */}
              <AnimatePresence>
                {showTranslation && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                  >
                    <Card className="border-2 border-blue-200 bg-blue-50">
                      <CardContent className="p-6 text-center">
                        <h3 className="text-xl font-semibold text-blue-900">
                          {getExpectedAnswer()}
                        </h3>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}
              </AnimatePresence>

              {/* –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ */}
              {showTranslation && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="grid grid-cols-2 md:grid-cols-4 gap-4"
                >
                  {RATING_OPTIONS.map((option) => (
                    <Button
                      key={option.value}
                      onClick={() => handleSubmitRating(option.value)}
                      className={`${option.color} text-white h-16 flex flex-col items-center justify-center space-y-1`}
                    >
                      <span className="text-xl">{option.emoji}</span>
                      <span className="text-sm font-medium">{option.label}</span>
                    </Button>
                  ))}
                </motion.div>
              )}
            </motion.div>
          )}

          {/* –†–µ–∂–∏–º—ã –≤–≤–æ–¥–∞ */}
          {(reviewMode === 'TRANSLATION_INPUT' || reviewMode === 'REVERSE_INPUT') && (
            <motion.div
              key="input"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
            >
              <TranslationInput
                word={getWordToShow()}
                expectedAnswer={getExpectedAnswer()}
                direction={currentDirection}
                transcription={currentReviewWord.transcription}
                example={currentReviewWord.example}
                onSubmit={handleTranslationSubmit}
              />
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}
'use client';

import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  LightBulbIcon,
  ClockIcon,
  CheckCircleIcon,
  XCircleIcon,
  QuestionMarkCircleIcon
} from '@heroicons/react/24/outline';
import { toast } from 'react-hot-toast';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Card, CardContent } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { useReview } from '@/store/useStore';
import { ReviewDirection, InputEvaluation, Hint } from '@/types/api';

interface TranslationInputProps {
  word: string;
  expectedAnswer: string;
  direction: ReviewDirection;
  wordId: string; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω wordId prop
  transcription?: string;
  example?: string;
  onSubmit: (userInput: string, hintsUsed: number, timeSpent: number) => void;
  onRetry?: () => void;
  disabled?: boolean;
}

export function TranslationInput({
  word,
  expectedAnswer,
  direction,
  wordId, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω wordId prop
  transcription,
  example,
  onSubmit,
  onRetry,
  disabled = false
}: TranslationInputProps) {
  const [userInput, setUserInput] = useState('');
  const [hints, setHints] = useState<Hint[]>([]);
  const [lengthHint, setLengthHint] = useState<string | null>(null); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [firstLetterHint, setFirstLetterHint] = useState<string | null>(null); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [isEvaluating, setIsEvaluating] = useState(false);
  const [evaluation, setEvaluation] = useState<InputEvaluation | null>(null);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [startTime] = useState(Date.now());
  const [timeSpent, setTimeSpent] = useState(0);
  
  const inputRef = useRef<HTMLInputElement>(null);
  const { getHint } = useReview();

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  useEffect(() => {
    const interval = setInterval(() => {
      setTimeSpent(Math.floor((Date.now() - startTime) / 1000));
    }, 1000);

    return () => clearInterval(interval);
  }, [startTime]);

  // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (inputRef.current && !disabled) {
      inputRef.current.focus();
    }
  }, [disabled]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞
  useEffect(() => {
    setUserInput('');
    setHints([]);
    setLengthHint(null); // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    setFirstLetterHint(null); // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    setEvaluation(null);
    setIsSubmitted(false);
  }, [word, expectedAnswer, wordId]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handleHint
  const handleHint = async (type: 'length' | 'first_letter') => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è wordId
    if (!wordId) {
      console.error('‚ùå –ù–µ—Ç wordId –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏');
      toast.error('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –ª–∏ —É–∂–µ —ç—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞
    const alreadyUsed = hints.some(h => h.type === type);
    if (alreadyUsed) {
      toast.info('–≠—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞');
      return;
    }
    
    try {
      console.log('üí° –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–ª–æ–≤–∞:', {
        wordId,
        word,
        type
      });
      
      const hint = await getHint(wordId, type);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
      const newHint: Hint = { type, content: hint.content, used: true };
      setHints(prev => [...prev, newHint]);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (type === 'length') {
        setLengthHint(hint.content);
      } else {
        setFirstLetterHint(hint.content);
      }
      
      toast.success(`–ü–æ–¥—Å–∫–∞–∑–∫–∞: ${hint.content}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É');
    }
  };

  const evaluateInput = async (input: string): Promise<InputEvaluation> => {
    // –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ —á–µ—Ä–µ–∑ API)
    const cleanInput = input.trim().toLowerCase();
    const cleanExpected = expectedAnswer.trim().toLowerCase();
    
    if (cleanInput === cleanExpected) {
      return {
        score: hints.length > 0 ? 3 : 4,
        reason: hints.length > 0 ? 'hint_used' : 'exact',
        similarity: 1.0
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—á–∞—Ç–∫–∏ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    const similarity = calculateSimilarity(cleanInput, cleanExpected);
    
    if (similarity >= 0.8) {
      return {
        score: hints.length > 0 ? 2 : 3,
        reason: 'typo',
        similarity
      };
    }
    
    return {
      score: 1,
      reason: 'wrong',
      similarity
    };
  };

  const calculateSimilarity = (str1: string, str2: string): number => {
    const longer = str1.length > str2.length ? str1 : str2;
    const shorter = str1.length > str2.length ? str2 : str1;
    
    if (longer.length === 0) return 1.0;
    
    const levenshteinDistance = (s1: string, s2: string): number => {
      const matrix = Array(s2.length + 1).fill(null).map(() => Array(s1.length + 1).fill(null));
      
      for (let i = 0; i <= s1.length; i++) matrix[0][i] = i;
      for (let j = 0; j <= s2.length; j++) matrix[j][0] = j;
      
      for (let j = 1; j <= s2.length; j++) {
        for (let i = 1; i <= s1.length; i++) {
          if (s1[i - 1] === s2[j - 1]) {
            matrix[j][i] = matrix[j - 1][i - 1];
          } else {
            matrix[j][i] = Math.min(
              matrix[j - 1][i - 1] + 1,
              matrix[j][i - 1] + 1,
              matrix[j - 1][i] + 1
            );
          }
        }
      }
      
      return matrix[s2.length][s1.length];
    };
    
    return (longer.length - levenshteinDistance(longer, shorter)) / longer.length;
  };

  const handleSubmit = async (e?: React.FormEvent) => {
    e?.preventDefault();
    
    if (!userInput.trim() || isEvaluating || isSubmitted || disabled) {
      return;
    }

    setIsEvaluating(true);
    setIsSubmitted(true);

    try {
      const result = await evaluateInput(userInput);
      setEvaluation(result);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
      setTimeout(() => {
        onSubmit(userInput, hints.length, timeSpent);
      }, 2000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 2 —Å–µ–∫—É–Ω–¥—ã
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≤–≤–æ–¥–∞:', error);
      setIsEvaluating(false);
      setIsSubmitted(false);
    }
  };

  const handleRetry = () => {
    setUserInput('');
    setIsSubmitted(false);
    setEvaluation(null);
    if (onRetry) onRetry();
  };

  const getScoreColor = (score: number) => {
    switch (score) {
      case 4: return 'text-green-600 bg-green-100';
      case 3: return 'text-blue-600 bg-blue-100';
      case 2: return 'text-orange-600 bg-orange-100';
      case 1: return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getScoreText = (score: number) => {
    switch (score) {
      case 4: return '–û—Ç–ª–∏—á–Ω–æ!';
      case 3: return '–•–æ—Ä–æ—à–æ!';
      case 2: return '–ù–µ–ø–ª–æ—Ö–æ';
      case 1: return '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ';
      default: return '–û—Ü–µ–Ω–∫–∞';
    }
  };

  const getDirectionText = () => {
    return direction === 'LEARNING_TO_NATIVE' 
      ? '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:'
      : '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫:';
  };

  return (
    <div className="w-full max-w-2xl mx-auto space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–∞–π–º–µ—Ä */}
      <div className="flex items-center justify-between">
        <h2 className="text-lg font-medium text-gray-900">
          {getDirectionText()}
        </h2>
        <div className="flex items-center space-x-2 text-sm text-gray-600">
          <ClockIcon className="h-4 w-4" />
          <span>{timeSpent}—Å</span>
        </div>
      </div>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–ª–æ–≤–∞ */}
      <Card className="border-2 border-blue-200">
        <CardContent className="p-6 text-center">
          <div className="space-y-2">
            <h3 className="text-2xl font-bold text-gray-900">{word}</h3>
            {transcription && (
              <p className="text-gray-600 text-sm">[{transcription}]</p>
            )}
            {example && (
              <p className="text-gray-500 text-sm italic">"{example}"</p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="relative">
          <Input
            ref={inputRef}
            type="text"
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥..."
            disabled={disabled || isSubmitted}
            className="text-center text-lg py-3"
            autoComplete="off"
          />
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ü–µ–Ω–∫–∏ */}
          <AnimatePresence>
            {isEvaluating && (
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                className="absolute inset-0 flex items-center justify-center bg-white bg-opacity-90 rounded-md"
              >
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
        <div className="flex flex-wrap gap-2 justify-center">
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => handleHint('length')}
            disabled={disabled || isSubmitted || hints.some(h => h.type === 'length')}
            className="flex items-center space-x-1"
          >
            <LightBulbIcon className="h-4 w-4" />
            <span>–î–ª–∏–Ω–∞</span>
            {lengthHint && <Badge variant="secondary" className="ml-1">‚úì</Badge>}
          </Button>
          
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => handleHint('first_letter')}
            disabled={disabled || isSubmitted || hints.some(h => h.type === 'first_letter')}
            className="flex items-center space-x-1"
          >
            <QuestionMarkCircleIcon className="h-4 w-4" />
            <span>–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞</span>
            {firstLetterHint && <Badge variant="secondary" className="ml-1">‚úì</Badge>}
          </Button>
        </div>

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ */}
        {(lengthHint || firstLetterHint) && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
            <div className="text-sm text-yellow-800">
              <strong>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</strong>
              {lengthHint && <div>‚Ä¢ –î–ª–∏–Ω–∞: {lengthHint}</div>}
              {firstLetterHint && <div>‚Ä¢ –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞: {firstLetterHint}</div>}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
        {!isSubmitted && (
          <Button
            type="submit"
            className="w-full"
            disabled={!userInput.trim() || disabled}
          >
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
          </Button>
        )}
      </form>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ */}
      <AnimatePresence>
        {evaluation && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-4"
          >
            <Card className={`border-2 ${evaluation.score >= 3 ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}`}>
              <CardContent className="p-6 text-center">
                <div className="flex items-center justify-center space-x-2 mb-3">
                  {evaluation.score >= 3 ? (
                    <CheckCircleIcon className="h-8 w-8 text-green-600" />
                  ) : (
                    <XCircleIcon className="h-8 w-8 text-red-600" />
                  )}
                  <Badge className={getScoreColor(evaluation.score)}>
                    {getScoreText(evaluation.score)}
                  </Badge>
                </div>
                
                <div className="text-sm text-gray-600 space-y-1">
                  <p><strong>–í–∞—à –æ—Ç–≤–µ—Ç:</strong> {userInput}</p>
                  <p><strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</strong> {expectedAnswer}</p>
                  {hints.length > 0 && (
                    <p><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫:</strong> {hints.length}</p>
                  )}
                  <p><strong>–í—Ä–µ–º—è:</strong> {timeSpent}—Å</p>
                </div>
              </CardContent>
            </Card>

            {evaluation.score < 3 && (
              <Button
                onClick={handleRetry}
                variant="outline"
                className="w-full"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </Button>
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
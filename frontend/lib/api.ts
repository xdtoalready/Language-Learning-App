// lib/api.ts

import {
  User,
  Word,
  WordStats,
  UserStats,
  ReviewStats,
  RegisterRequest,
  LoginRequest,
  AuthResponse,
  CreateWordRequest,
  UpdateWordRequest,
  SubmitReviewRequest,
  ReviewSessionResponse,
  WordsResponse,
  DueWordsResponse,
  ApiError
} from '@/types/api';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';

class ApiClient {
  private baseURL: string;
  private token: string | null = null;

  constructor(baseURL: string) {
    this.baseURL = baseURL;
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (typeof window !== 'undefined') {
      this.token = localStorage.getItem('auth_token');
      console.log('üîß API Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', { 
        baseURL: this.baseURL, 
        hasToken: !!this.token 
      });
    }
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  setToken(token: string | null) {
    console.log('üîë –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω:', token ? '–Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω' : '–æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω');
    this.token = token;
    if (typeof window !== 'undefined') {
      if (token) {
        localStorage.setItem('auth_token', token);
      } else {
        localStorage.removeItem('auth_token');
      }
    }
  }

  // –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω
  getToken(): string | null {
    return this.token;
  }

  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
private async request<T>(
  endpoint: string,
  options: RequestInit = {}
): Promise<T> {
    const url = `${this.baseURL}/api${endpoint}`;
    
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
      ...options.headers,
    };

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.token) {
      headers.Authorization = `Bearer ${this.token}`;
    }

  try {
    console.log('üöÄ API Request:', { 
        url, 
        method: options.method || 'GET', 
        hasAuth: !!this.token,
        endpoint 
      });
    
      const response = await fetch(url, {
        ...options,
        headers,
        // –£–±–∏—Ä–∞–µ–º credentials: 'include' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ
        mode: 'cors'
      });

      console.log('üì° API Response:', { 
        status: response.status, 
        ok: response.ok, 
        url: response.url,
        statusText: response.statusText
      });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
      const contentType = response.headers.get('content-type');
      let data: any = null;
    
if (contentType && contentType.includes('application/json')) {
        try {
          data = await response.json();
        } catch (jsonError) {
          console.error('‚ùå JSON Parse Error:', jsonError);
          data = { error: 'Invalid JSON response' };
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ JSON, –ø–æ–ª—É—á–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        const textResponse = await response.text();
        console.log('üìÑ Non-JSON Response:', textResponse);
        data = { error: textResponse || 'No response body' };
      }

      if (!response.ok) {
        const errorMessage = data?.error || data?.message || `HTTP error! status: ${response.status}`;
        console.error('‚ùå API Error:', { status: response.status, message: errorMessage, data });
        
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –æ—á–∏—â–∞–µ–º –µ–≥–æ
        if (response.status === 401 || response.status === 403) {
          console.log('üîÑ –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –æ—á–∏—â–∞–µ–º...');
          this.setToken(null);
        }
        
        throw new Error(errorMessage);
      }

      console.log('‚úÖ API Success:', data);
      return data;
    } catch (error) {
      console.error('üî• Network/Fetch Error:', error);
      
      if (error instanceof Error) {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à–∞ –æ—à–∏–±–∫–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        if (error.message.includes('HTTP error!') || error.message.includes('error')) {
          throw error;
        }
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
        throw new Error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      }
      
      throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  }

  async getFriendProfile(friendId: string): Promise<{ friend: any }> {
  return this.request<{ friend: any }>(`/friendships/${friendId}/profile`);
}

  // –ú–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async register(userData: RegisterRequest): Promise<AuthResponse> {
    const response = await this.request<AuthResponse>('/auth/register', {
      method: 'POST',
      body: JSON.stringify(userData),
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    this.setToken(response.token);
    return response;
  }

  async login(credentials: LoginRequest): Promise<AuthResponse> {
    const response = await this.request<AuthResponse>('/auth/login', {
      method: 'POST',
      body: JSON.stringify(credentials),
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    this.setToken(response.token);
    return response;
  }

  async updateProfile(updates: {
    username?: string;
    learningLanguage?: string;
    dailyGoal?: number;
    avatar?: string;
  }): Promise<{ message: string; user: User }> {
    return this.request<{ message: string; user: User }>('/auth/profile', {
      method: 'PUT',
      body: JSON.stringify(updates),
    });
  }

  async getProfile(): Promise<{ user: User }> {
    return this.request<{ user: User }>('/auth/me');
  }

  logout() {
    this.setToken(null);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–≤–∞–º–∏
  async getWords(params?: {
    search?: string;
    tags?: string;
    masteryLevel?: number;
    page?: number;
    limit?: number;
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
  }): Promise<WordsResponse> {
    const searchParams = new URLSearchParams();
    
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value !== undefined) {
          searchParams.append(key, value.toString());
        }
      });
    }

    const query = searchParams.toString() ? `?${searchParams.toString()}` : '';
    return this.request<WordsResponse>(`/words${query}`);
  }

  async getDueWords(): Promise<DueWordsResponse> {
    return this.request<DueWordsResponse>('/words/due');
  }

  async getWord(id: string): Promise<{ word: Word }> {
    return this.request<{ word: Word }>(`/words/${id}`);
  }

  async createWord(wordData: CreateWordRequest): Promise<{ message: string; word: Word }> {
    return this.request<{ message: string; word: Word }>('/words', {
      method: 'POST',
      body: JSON.stringify(wordData),
    });
  }

  async updateWord(id: string, wordData: UpdateWordRequest): Promise<{ message: string; word: Word }> {
    return this.request<{ message: string; word: Word }>(`/words/${id}`, {
      method: 'PUT',
      body: JSON.stringify(wordData),
    });
  }

  async deleteWord(id: string): Promise<{ message: string }> {
    return this.request<{ message: string }>(`/words/${id}`, {
      method: 'DELETE',
    });
  }

  async getWordsStats(): Promise<{ stats: WordStats }> {
    return this.request<{ stats: WordStats }>('/words/stats');
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–≤—å—é
  async startReviewSession(): Promise<ReviewSessionResponse> {
    return this.request<ReviewSessionResponse>('/reviews/session/start');
  }

  async submitReview(reviewData: SubmitReviewRequest): Promise<{
    message: string;
    progressUpdate: {
      masteryLevel: number;
      nextReviewDate: string;
      currentInterval: number;
      isWordMastered: boolean;
    };
  }> {
    return this.request('/reviews', {
      method: 'POST',
      body: JSON.stringify(reviewData),
    });
  }

  async getReviewStats(days?: number): Promise<{ stats: ReviewStats }> {
    const query = days ? `?days=${days}` : '';
    return this.request<{ stats: ReviewStats }>(`/reviews/stats${query}`);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async getUserStats(): Promise<UserStats> {
    return this.request<UserStats>('/stats');
  }

  async updateDailyGoal(dailyGoal: number): Promise<{ message: string; dailyGoal: number }> {
    return this.request<{ message: string; dailyGoal: number }>('/stats/daily-goal', {
      method: 'PUT',
      body: JSON.stringify({ dailyGoal }),
    });
  }

  async getDifficultWords(limit?: number): Promise<{ difficultWords: Word[] }> {
    const query = limit ? `?limit=${limit}` : '';
    return this.request<{ difficultWords: Word[] }>(`/stats/difficult-words${query}`);
  }

  // ============== FRIENDSHIP METHODS ==============
  
  async searchUsers(query: string): Promise<{ users: any[] }> {
    return this.request<{ users: any[] }>(`/friendships/search?query=${encodeURIComponent(query)}`);
  }

  async sendFriendRequest(friendId: string): Promise<{ message: string; friendship: any }> {
    return this.request<{ message: string; friendship: any }>('/friendships/request', {
      method: 'POST',
      body: JSON.stringify({ friendId }),
    });
  }

  async respondToFriendRequest(friendshipId: string, action: 'accept' | 'reject'): Promise<{ message: string; friendship?: any }> {
    return this.request<{ message: string; friendship?: any }>(`/friendships/request/${friendshipId}`, {
      method: 'PUT',
      body: JSON.stringify({ action }),
    });
  }

  async getFriends(): Promise<{ friends: any[] }> {
    return this.request<{ friends: any[] }>('/friendships');
  }

  async getFriendsWithClouds(): Promise<{ friends: any[] }> {
    return this.request<{ friends: any[] }>('/friendships/clouds');
  }

  async getPendingRequests(): Promise<{ requests: any[] }> {
    return this.request<{ requests: any[] }>('/friendships/requests');
  }

  async removeFriend(friendshipId: string): Promise<{ message: string }> {
    return this.request<{ message: string }>(`/friendships/${friendshipId}`, {
      method: 'DELETE',
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
  async healthCheck(): Promise<{ status: string; timestamp: string; service: string }> {
    return this.request<{ status: string; timestamp: string; service: string }>('/health');
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
export const apiClient = new ApiClient(API_BASE_URL);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export default apiClient;
// lib/utils.ts

import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
export function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

export function formatDateShort(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    month: 'short',
    day: 'numeric'
  });
}

export function formatRelativeDate(dateString: string): string {
  const date = new Date(dateString);
  const now = new Date();
  const diffTime = now.getTime() - date.getTime();
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

  if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è';
  if (diffDays === 1) return '–í—á–µ—Ä–∞';
  if (diffDays < 7) return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
  if (diffDays < 30) return `${Math.floor(diffDays / 7)} –Ω–µ–¥. –Ω–∞–∑–∞–¥`;
  if (diffDays < 365) return `${Math.floor(diffDays / 30)} –º–µ—Å. –Ω–∞–∑–∞–¥`;
  return `${Math.floor(diffDays / 365)} –ª–µ—Ç –Ω–∞–∑–∞–¥`;
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–ª–æ–≤
export function getMasteryLevelName(level: number): string {
  const levels = {
    0: '–ù–æ–≤–æ–µ',
    1: '–ò–∑—É—á–∞–µ—Ç—Å—è',
    2: '–ó–Ω–∞–∫–æ–º–æ–µ',
    3: '–ó–Ω–∞—é',
    4: '–•–æ—Ä–æ—à–æ –∑–Ω–∞—é',
    5: '–í—ã—É—á–µ–Ω–æ'
  };
  return levels[level as keyof typeof levels] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

export function getMasteryLevelColor(level: number): string {
  const colors = {
    0: 'bg-gray-100 text-gray-800',
    1: 'bg-red-100 text-red-800',
    2: 'bg-orange-100 text-orange-800',
    3: 'bg-yellow-100 text-yellow-800',
    4: 'bg-blue-100 text-blue-800',
    5: 'bg-green-100 text-green-800'
  };
  return colors[level as keyof typeof colors] || 'bg-gray-100 text-gray-800';
}

export function getNextReviewText(nextReviewDate: string): string {
  const date = new Date(nextReviewDate);
  const now = new Date();
  const diffTime = date.getTime() - now.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

  if (diffDays < 0) return '–ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é';
  if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è';
  if (diffDays === 1) return '–ó–∞–≤—Ç—Ä–∞';
  if (diffDays < 7) return `–ß–µ—Ä–µ–∑ ${diffDays} –¥–Ω.`;
  if (diffDays < 30) return `–ß–µ—Ä–µ–∑ ${Math.floor(diffDays / 7)} –Ω–µ–¥.`;
  return `–ß–µ—Ä–µ–∑ ${Math.floor(diffDays / 30)} –º–µ—Å.`;
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
export function getRatingText(rating: number): string {
  const ratings = {
    1: '–ó–∞–±—ã–ª',
    2: '–° —Ç—Ä—É–¥–æ–º',
    3: '–•–æ—Ä–æ—à–æ',
    4: '–û—Ç–ª–∏—á–Ω–æ'
  };
  return ratings[rating as keyof typeof ratings] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

export function getRatingColor(rating: number): string {
  const colors = {
    1: 'text-red-600',
    2: 'text-orange-600',
    3: 'text-blue-600',
    4: 'text-green-600'
  };
  return colors[rating as keyof typeof colors] || 'text-gray-600';
}

export function getRatingEmoji(rating: number): string {
  const emojis = {
    1: 'üòû',
    2: 'üòê',
    3: 'üòä',
    4: 'ü§©'
  };
  return emojis[rating as keyof typeof emojis] || '‚ùì';
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
export function calculateProgress(current: number, goal: number): number {
  if (goal === 0) return 0;
  return Math.min(100, Math.round((current / goal) * 100));
}

export function getProgressColor(percentage: number): string {
  if (percentage >= 100) return 'bg-green-500';
  if (percentage >= 75) return 'bg-blue-500';
  if (percentage >= 50) return 'bg-yellow-500';
  if (percentage >= 25) return 'bg-orange-500';
  return 'bg-red-500';
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å—Ç—Ä–∏–∫–æ–≤
export function getStreakEmoji(streak: number): string {
  if (streak >= 30) return 'üî•';
  if (streak >= 14) return '‚ö°';
  if (streak >= 7) return '‚ú®';
  if (streak >= 3) return '‚≠ê';
  return 'üí™';
}

export function getStreakText(streak: number): string {
  if (streak === 0) return '–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å!';
  if (streak === 1) return '1 –¥–µ–Ω—å –ø–æ–¥—Ä—è–¥';
  if (streak < 5) return `${streak} –¥–Ω—è –ø–æ–¥—Ä—è–¥`;
  return `${streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥`;
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

export function isValidPassword(password: string): boolean {
  return password.length >= 6;
}

export function isValidUsername(username: string): boolean {
  const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;
  return usernameRegex.test(username);
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export function getErrorMessage(error: unknown): string {
  if (error instanceof Error) return error.message;
  if (typeof error === 'string') return error;
  return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
export function highlightSearchText(text: string, search: string): string {
  if (!search) return text;
  
  const regex = new RegExp(`(${search})`, 'gi');
  return text.replace(regex, '<mark class="bg-yellow-200">$1</mark>');
}

export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout;
  return (...args: Parameters<T>) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
export function getFromStorage(key: string): any {
  if (typeof window === 'undefined') return null;
  
  try {
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : null;
  } catch {
    return null;
  }
}

export function setToStorage(key: string, value: any): void {
  if (typeof window === 'undefined') return;
  
  try {
    localStorage.setItem(key, JSON.stringify(value));
  } catch {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏
  }
}

export function removeFromStorage(key: string): void {
  if (typeof window === 'undefined') return;
  
  try {
    localStorage.removeItem(key);
  } catch {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–≥–∞–º–∏
export function parseTags(tagsString: string): string[] {
  return tagsString
    .split(',')
    .map(tag => tag.trim())
    .filter(tag => tag.length > 0);
}

export function formatTags(tags: string[]): string {
  return tags.join(', ');
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
export const LANGUAGES = {
  'English': 'üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
  'Korean': 'üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π',
  'Chinese': 'üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π',
  'Japanese': 'üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π',
  'German': 'üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π',
  'French': 'üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
  'Spanish': 'üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π',
  'Italian': 'üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π'
};

export const MASTERY_LEVELS = [
  { value: 0, label: '–ù–æ–≤–æ–µ', color: 'gray' },
  { value: 1, label: '–ò–∑—É—á–∞–µ—Ç—Å—è', color: 'red' },
  { value: 2, label: '–ó–Ω–∞–∫–æ–º–æ–µ', color: 'orange' },
  { value: 3, label: '–ó–Ω–∞—é', color: 'yellow' },
  { value: 4, label: '–•–æ—Ä–æ—à–æ –∑–Ω–∞—é', color: 'blue' },
  { value: 5, label: '–í—ã—É—á–µ–Ω–æ', color: 'green' }
];